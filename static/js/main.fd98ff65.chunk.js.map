{"version":3,"sources":["App.js","components/Board.js","components/Square.js","components/Piece.js","components/WinAnnouncement.js","components/DrawBtn.js","components/MoveSettings.js","components/Tutorial.js","components/ControlBar.js","reportWebVitals.js","index.js"],"names":["oRestart","pieceMovements","rook","bishop","knight","king","queen","appStyle","backgroundColor","App","_useState","useState","_useState2","Object","C_Users_jason_OneDrive_Desktop_Projects_chess_project_react_react_chess_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","showWin","setShowWin","_useState3","_useState4","color","setColor","_useState5","_useState6","gameDrawn","setGameDrawn","_useState7","_useState8","checkEnabled","setCheckEnabled","_useState9","_useState10","castlingEnabled","setCastlingEnabled","_useState11","_useState12","flippingEnabled","setFlippingEnabled","_useState13","_useState14","moveTypes","setMoveTypes","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","style","className","_components_Board__WEBPACK_IMPORTED_MODULE_2__","matchEnded","restart","_components_WinAnnouncement__WEBPACK_IMPORTED_MODULE_3__","reset","_components_ControlBar__WEBPACK_IMPORTED_MODULE_4__","drawGame","changeCastling","changeChecks","checksEnabled","changeFlipping","flipsEnabled","sendTriplets","triplets","type","newTriplets","newMoves","global","structuredClone","i","length","newTriplet","push","x","y","maxu","changeMoveTypes","oPieces","oSetPieces","endMatch","kingCaptures","flippingBoardEnabled","selectedPiece","setHighlight","console","error","boardModel","currentTurn","setters","Map","stats","enPassant","gameState","id","set","kingsideCastling","queensideCastling","j","occupier","whiteControls","blackControls","whiteControlsStrong","blackControlsStrong","setCurrentTurn","defaultPieceMovements","originalPieces","makePieces","findPiece","opposite","forEach","v","pieceId","position","setPositionX","toString","setPositionY","endGame","addSetter","setPosX","setPosY","isInBoard","updateBoard","x1","y1","x2","y2","rookControls","n","l","k","square","includes","bishopControls","detailBoard","idArr","split","direction","promotePawn","pawnId","map","piece","positY","pawnSetters","get","delete","posX","posY","img","movePiece","tempBoard","result","modelCopy","parseInt","log","substring","padEnd","getBMString","getControlString","attackedKing","kingsInCheck","kingInCheck","kingColor","_findPiece","_findPiece2","kingPosX","kingPosY","kingCanMove","xp","yp","canKingMove","piecesAttacking","findPiecesAttackingKing","attackerX","attackerY","dx","dy","larger","Math","max","abs","dxNorm","dyNorm","pathBlocked","concat","pieceSetters","trplMod","b","trplDivide","movePieceFilter","_isTripletMultiple","diffX","diffY","pMovements","movements","ux","uy","xUnits","yUnits","maxU","isTripletMultiple","_isTripletMultiple2","unitX","unitY","units","squareSelected","isCapture","differenceY","pawnCapture","startingPos","differenceX","enPassantTemp","positionX","positionY","filter","movePawn","differenceXZero","differenceYZero","sideMove","diagnolMove","colorStats","kingsideCastle","queensideCastle","rookId","side","moveKing","pColor","pSide","pieceSelected","pieceColor","pieceType","highlightPiece","boardStyle","width","height","Board","props","squares","pieces","setPieces","turnColor","setTurnColor","flipBoard","useEffect","newSquare","sizeX","sizeY","padStart","react__WEBPACK_IMPORTED_MODULE_3___default","display","justifyContent","_Square__WEBPACK_IMPORTED_MODULE_1__","key","selectSquare","boardFlip","_Piece__WEBPACK_IMPORTED_MODULE_2__","selectPiece","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_1__","Square","onClick","transform","Piece","background","setBackground","isSelected","src","alt","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","WinAnnouncement","str","txt","charAt","toUpperCase","slice","secondClass","DrawBtn","react_default","MoveSettings","slicedToArray","showSettings","setShowSettings","initialState","createInitialState","setTriplets","Fragment","triplet","min","value","onChange","e","t","target","toConsumableArray","Tutorial","showTutorial","setShowTutorial","ControlBar","components_DrawBtn","components_MoveSettings","components_Tutorial","reportWebVitals","onPerfEntry","Function","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.fd98ff65.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport React from \"react\";\nimport Board from \"./components/Board\";\nimport WinAnnouncement from \"./components/WinAnnouncement\"\nimport ControlBar from \"./components/ControlBar\"\n\nlet oRestart\n\n// Default piece movements\nlet pieceMovements = {\n  rook: [[1, 0, 8], [-1, 0, 8], [0, 1, 8], [0, -1, 8]],\n  bishop: [[1, 1, 8], [-1, -1, 8], [1, -1, 8], [-1, 1, 8]],\n  knight: [[1, 2, 1], [-1, 2, 1], [1, -2, 1], [-1, -2, 1], \n  [2, 1, 1], [2, -1, 1], [-2, 1, 1], [-2, -1, 1]],\n  king: [[1, 0, 1], [-1, 0, 1], [0, 1, 1], [0, -1, 1], \n  [1, 1, 1], [-1, -1, 1], [1, -1, 1], [-1, 1, 1]],\n  queen: [[1, 0, 8], [-1, 0, 8], [0, 1, 8], [0, -1, 8], \n  [1, 1, 8], [-1, -1, 8], [1, -1, 8], [-1, 1, 8]]\n}\n\nfunction App() {\n  const [showWin, setShowWin] = useState(false)\n  const [color, setColor] = useState(\"None\")\n  const [gameDrawn, setGameDrawn] = useState(false)\n  const [checkEnabled, setCheckEnabled] = useState(true)\n  const [castlingEnabled, setCastlingEnabled] = useState(true)\n  const [flippingEnabled, setFlippingEnabled] = useState(false)\n  const [moveTypes, setMoveTypes] = useState(pieceMovements)\n  \n  function matchEnded(color, restart) {\n    setColor(color)\n    setShowWin(true)\n    oRestart = restart\n  }\n\n  function reset() {\n    oRestart()\n    setShowWin(false)\n    setGameDrawn(false)\n  }\n\n  function drawGame() {\n    setGameDrawn(true)\n  }\n\n  function changeCastling(castlingEnabled) {\n    setCastlingEnabled(castlingEnabled)\n  }\n\n  function changeChecks(checksEnabled) {\n    setCheckEnabled(checksEnabled)\n  }\n\n  function changeFlipping(flipsEnabled) {\n    setFlippingEnabled(flipsEnabled)\n  }\n\n  function changeMoveTypes(newTriplets, type) {\n    let newMoves = global.structuredClone(moveTypes)\n    newMoves[type] = []\n    for (let i = 0; i < newTriplets.length; i++) {\n      let newTriplet = newTriplets[i]\n      newMoves[type].push([newTriplet.x, newTriplet.y, newTriplet.maxu])\n    }\n    \n    return newMoves\n  }\n\n  function tripletsReceived(triplets, type) {\n    setMoveTypes(changeMoveTypes(triplets, type))\n  }\n\n  return (\n    <div style={appStyle} className=\"App\">\n      <Board matchEnded={matchEnded} gameDrawn={gameDrawn} checkEnabled={checkEnabled}\n      castlingEnabled={castlingEnabled} flippingEnabled={flippingEnabled} moveTypes={moveTypes}/>\n      <WinAnnouncement showWin={showWin} color={color} reset={reset}/>\n      <ControlBar drawGame={drawGame} changeCastling={changeCastling} changeChecks={changeChecks}\n      changeFlipping={changeFlipping} checkEnabled={checkEnabled} castlingEnabled={castlingEnabled}\n      flippingEnabled={flippingEnabled} sendTriplets={tripletsReceived}/>\n    </div>\n  );\n}\n\nconst appStyle = {\n  backgroundColor: \"rgb(20, 20, 20)\",\n}\n\nexport default App;\n","import Square from \"./Square\"\r\nimport Piece from \"./Piece\"\r\nimport React, { useEffect, useState } from \"react\"\r\n\r\n// Making kingCaptures true disables check/checkmate detection! Capturing the king is required to\r\n// win!\r\nlet kingCaptures = false\r\nlet castlingEnabled = true\r\nlet flippingBoardEnabled = false\r\n// Create a function that changes the selectedPiece, and pass it to the child, so that when the child\r\n// is clicked on, the selectedPiece updates wooo!! wow\r\nlet selectedPiece = null // = id of the piece(its key in the map)\r\nlet setHighlight = () => console.error(\"No piece selected\")\r\nlet boardModel = []\r\nlet currentTurn = \"white\"\r\nlet setters = new Map()\r\nlet stats = new Map()\r\n// If a pawn moves two forward, then information about that pawn is stored in this variable for the\r\n// next turn in case it can be en passanted\r\nlet enPassant = null\r\nlet gameState = \"game running\"\r\nlet id = 0\r\n// o stands for outer\r\nlet oPieces, oSetPieces\r\nlet endMatch\r\n// Keep track of basic stats for each color\r\nstats.set(\"white\", {\r\n    kingsideCastling: castlingEnabled,\r\n    queensideCastling: castlingEnabled,\r\n})\r\nstats.set(\"black\", {\r\n    kingsideCastling: castlingEnabled,\r\n    queensideCastling: castlingEnabled,\r\n})\r\n\r\nfor (let i = 0; i < 8; i++) {\r\n    boardModel[i] = []\r\n    for (let j = 0; j < 8; j++) {\r\n        // The first part of this pair indicates the piece thats on the square, whereas the second\r\n        // indicates which color controls that square\r\n        boardModel[i][j] = {\r\n            occupier: \"empty\",\r\n            whiteControls: false,\r\n            blackControls: false,\r\n            whiteControlsStrong: false, // whiteControlsStrong means a white piece that isn't the king controls the square\r\n            blackControlsStrong: false\r\n        }\r\n    }\r\n}\r\n\r\n// Piece movement patterns are made up of one or more triplets that contain three main values\r\n// in each triplet array: x; this determines the unit x value, y; this determines the unit y value,\r\n// max units; this determines how many unit xs and unit ys the piece can go at most. For example,\r\n// for the triplet in the rook [0, 1, 8], this triplet says that the rook can go in the positive y\r\n// direction one at a time, cannot go into the x direction in that same move, and can do that up to\r\n// 8 times in one move. So, it says the rook can move in the positive y direction.\r\nlet defaultPieceMovements = {\r\n    rook: [[1, 0, 8], [-1, 0, 8], [0, 1, 8], [0, -1, 8]],\r\n    bishop: [[1, 1, 8], [-1, -1, 8], [1, -1, 8], [-1, 1, 8]],\r\n    knight: [[1, 2, 1], [-1, 2, 1], [1, -2, 1], [-1, -2, 1], \r\n    [2, 1, 1], [2, -1, 1], [-2, 1, 1], [-2, -1, 1]],\r\n    king: [[1, 0, 1], [-1, 0, 1], [0, 1, 1], [0, -1, 1], \r\n    [1, 1, 1], [-1, -1, 1], [1, -1, 1], [-1, 1, 1]],\r\n    queen: [[1, 0, 8], [-1, 0, 8], [0, 1, 8], [0, -1, 8], \r\n    [1, 1, 8], [-1, -1, 8], [1, -1, 8], [-1, 1, 8]]\r\n}\r\n\r\nlet pieceMovements = defaultPieceMovements\r\n\r\n// Only want to make all the pieces once for each game\r\nlet originalPieces = makePieces()\r\n\r\n// Returns a string that represents the board model (for testing)\r\nfunction getBMString() {\r\n    let result = \"\"\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            let thing = boardModel[j][i].occupier.substring(0, 5)\r\n            result += thing.padEnd(6, \" \")\r\n        }\r\n        result += \"\\n\"\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nfunction getControlString() {\r\n    let result = \"\"\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            result += \"(\"\r\n            if (boardModel[j][i].whiteControls) {\r\n                result += \"W\"\r\n            } else {\r\n                result += \"-\"\r\n            }\r\n            result += \", \"\r\n            if (boardModel[j][i].blackControls) {\r\n                result += \"B\"\r\n            } else {\r\n                result += \"-\"\r\n            }\r\n            result += \"),\"\r\n        }\r\n        result += \"\\n\"\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nfunction modelCopy() {\r\n    let result = []\r\n    for (let i = 0; i <= 7; i++) {\r\n        result[i] = []\r\n        for (let j = 0; j <= 7; j++) {\r\n            result[i][j] = global.structuredClone(boardModel[i][j])\r\n        }\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nfunction findPiece(id) {\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            if (boardModel[i][j].occupier === id) {\r\n                return [i, j]\r\n            }\r\n        }\r\n    }\r\n\r\n    return null\r\n}\r\n\r\n// Returns the color of the kings that are in check or returns \"\"\r\nfunction kingInCheck() {\r\n    let kingsInCheck = \"\"\r\n    for (let i = 0; i <= 7; i++) {\r\n        for (let j = 0; j <= 7; j++) {\r\n            let idArr = boardModel[i][j].occupier.split(\"_\")\r\n            let type = idArr[0]\r\n            let color = idArr[1]\r\n            if (type === \"king\") {\r\n                if (boardModel[i][j][opposite(color) + \"Controls\"]) {\r\n                    kingsInCheck += color\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    return kingsInCheck\r\n}\r\n\r\nfunction opposite(color) {\r\n    return color === \"white\" ? \"black\" : \"white\"\r\n}\r\n\r\nfunction restart() {\r\n    id = 0\r\n    stats.set(\"white\", {\r\n        kingsideCastling: castlingEnabled,\r\n        queensideCastling: castlingEnabled,\r\n    })\r\n    stats.set(\"black\", {\r\n        kingsideCastling: castlingEnabled,\r\n        queensideCastling: castlingEnabled,\r\n    })\r\n    for (let i = 0; i < 8; i++) {\r\n        boardModel[i] = []\r\n        for (let j = 0; j < 8; j++) {\r\n            // The first part of this pair indicates the piece thats on the square, whereas the second\r\n            // indicates which color controls that square\r\n            boardModel[i][j] = {\r\n                occupier: \"empty\",\r\n                whiteControls: false,\r\n                blackControls: false,\r\n                whiteControlsStrong: false, // whiteControlsStrong means a white piece that isn't the king controls the square\r\n                blackControlsStrong: false\r\n            }\r\n        }\r\n    }\r\n    originalPieces = makePieces()\r\n    oPieces = originalPieces\r\n    oSetPieces(originalPieces)\r\n    setters.forEach((v, pieceId) => {\r\n        let position = findPiece(pieceId)\r\n        if (position != null) {\r\n            v.setPositionX((position[0] * 100).toString())\r\n            v.setPositionY((position[1] * 100).toString())\r\n        }\r\n    })\r\n    if (flippingBoardEnabled) {\r\n        setCurrentTurn(\"white\")\r\n    }\r\n    currentTurn = \"white\"\r\n    gameState = \"game running\"\r\n}\r\n\r\nfunction endGame(color) {\r\n    gameState = \"game ended\"\r\n    endMatch(color, restart)\r\n}\r\n\r\nfunction addSetter(pieceId, setPosX, setPosY) {\r\n    setters.set(pieceId, {setPositionX: setPosX, setPositionY: setPosY})\r\n}\r\n\r\nfunction isInBoard(x, y) {\r\n    return x >= 0 && x <= 7 && y >= 0 && y <= 7\r\n}\r\n\r\n// Adds/moves a piece on the board\r\nfunction updateBoard(x1, y1, x2, y2, id) {\r\n    if (x1 >= 0 && y1 >= 0) {\r\n        boardModel[x1][y1].occupier = \"empty\"\r\n    }\r\n\r\n    boardModel[x2][y2].occupier = id\r\n}\r\n\r\nfunction rookControls(i, j, color) {\r\n    for (let n = 0; n <= 1; n++) {\r\n        for (let l = -1; l <= 1; l += 2) {\r\n            let k = 1\r\n            let x, y\r\n            // When n = 0, x = i + k * l, and y = j (to go horizontal)\r\n            while (isInBoard(x = (i + k * l - (k * l * n)), y = (j + (k * l * n)))) {\r\n                let square = boardModel[x][y]\r\n                let occupier = square.occupier\r\n                square[color + \"Controls\"] = true\r\n                square[color + \"ControlsStrong\"] = true\r\n                if (occupier !== \"empty\" && \r\n                        !(occupier.includes(\"king_\") && occupier.includes(opposite(color)))) {\r\n                    break\r\n                }\r\n                k++\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction bishopControls(i, j, color) {\r\n    // Bishop on the upward-right diagnol when n = 1, on upward-left when n = -1\r\n    for (let n = -1; n <= 1; n += 2) {\r\n        for (let l = -1; l <= 1; l += 2) {\r\n            let k = 1\r\n            let x, y\r\n            while (isInBoard(x = (i + n * (k * l)), y = (j + k * l))) {\r\n                let square = boardModel[x][y]\r\n                square[color + \"Controls\"] = true\r\n                square[color + \"ControlsStrong\"] = true\r\n                if (boardModel[x][y].occupier !== \"empty\") {\r\n                    break\r\n                }\r\n                k++\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction detailBoard() {\r\n    // Reset the controllers of the board\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            boardModel[i][j].whiteControls = false\r\n            boardModel[i][j].whiteControlsStrong = false\r\n            boardModel[i][j].blackControls = false\r\n            boardModel[i][j].blackControlsStrong = false\r\n        }\r\n    }\r\n\r\n    // Repopulate\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            let idArr = boardModel[i][j].occupier.split(\"_\")\r\n            let type = idArr[0]\r\n            let color = idArr[1]\r\n            switch (type) {\r\n                case \"empty\":\r\n                    break\r\n                case \"pawn\":\r\n                    let direction = color === \"black\" ? 1 : -1\r\n                    if (isInBoard(i + 1, j + direction)) {\r\n                        let square = boardModel[i + 1][j + direction]\r\n                        square[color + \"Controls\"] = true\r\n                        square[color + \"ControlsStrong\"] = true\r\n                    }\r\n                    if (isInBoard(i - 1, j + direction)) {\r\n                        let square = boardModel[i - 1][j + direction]\r\n                        square[color + \"Controls\"] = true\r\n                        square[color + \"ControlsStrong\"] = true\r\n                    }\r\n                    break\r\n                case \"rook\":\r\n                    rookControls(i, j, color)\r\n                    break\r\n                case \"knight\":\r\n                    // 8(or 2^3) combinations in total (a knight has 8 valid moves)\r\n                    for (let n = 0; n <= 1; n++) {\r\n                        for (let l = -1; l <= 1; l += 2) {\r\n                            for (let k = -1; k <= 1; k += 2) {\r\n                                // Horizontal\r\n                                let x, y\r\n                                // kn - 2ln = n(k - 2l), 2ln - kn = n(2l - k)\r\n                                if (isInBoard(x = (i + l * 2 + n * (k - (2 * l))), \r\n                                        y = (j + k + n * ((2 * l) - k)))) {\r\n                                    boardModel[x][y][color + \"Controls\"] = true\r\n                                    boardModel[x][y][color + \"ControlsStrong\"] = true\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    break\r\n                case \"bishop\":\r\n                    bishopControls(i, j, color)\r\n                    break\r\n                case \"queen\":\r\n                    rookControls(i, j, color)\r\n                    bishopControls(i, j, color)\r\n                    break\r\n                case \"king\":\r\n                    // Sideways\r\n                    for (let n = 0; n <= 1; n++) {\r\n                        for (let l = -1; l <= 1; l += 2) {\r\n                            let x, y\r\n                            if (isInBoard(x = (i + l - (l * n)), y = (j + (l * n)))) {\r\n                                boardModel[x][y][color + \"Controls\"] = true\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Diagnol\r\n                    for (let n = -1; n <= 1; n += 2) {\r\n                        for (let l = -1; l <= 1; l += 2) {\r\n                            let x, y\r\n                            if (isInBoard(x = (i + n * l), y = (j + l))) {\r\n                                boardModel[x][y][color + \"Controls\"] = true\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                    break\r\n                default:\r\n                    console.error(\"Not valid piece type: \", type)\r\n                    break\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction promotePawn(pawnId, x) {\r\n    // Map all elements onto the same as what they were before except for the pawn with\r\n    // pawnId (change its type and id)\r\n    oPieces = oPieces.map((piece) => {\r\n        if (piece.id !== pawnId) {\r\n            return piece\r\n        } else {\r\n            let pieceId = \"queen_\" + selectedPiece.color + \"_\" + (id++).toString()\r\n            let positY = (currentTurn === \"black\" ? \"700\" : \"0\").toString()\r\n            \r\n            let pawnSetters = setters.get(pawnId)\r\n            setters.delete(pawnId)\r\n            setters.set(pieceId, pawnSetters)\r\n\r\n            selectedPiece = {\r\n                id: pieceId,\r\n                color: currentTurn,\r\n                type: \"queen\",\r\n                posX: x,\r\n                posY: positY\r\n            }\r\n            return {\r\n                id: pieceId,\r\n                img: \"piece-images/\" + currentTurn + \"-queen.png\",\r\n                posX: x,\r\n                posY: positY,\r\n                color: currentTurn,\r\n                type: \"queen\"\r\n            }\r\n        }\r\n    })\r\n    oSetPieces(oPieces)\r\n    // Need to update the boardModel?\r\n}\r\n\r\nfunction canKingMove(kingPosX, kingPosY) {\r\n    let kingCanMove = false\r\n        \r\n    // Sideways\r\n    for (let i = 0; i <= 1; i++) {\r\n        for (let j = -1; j <= 1; j += 2) {\r\n            let xp = kingPosX + j - (j * i)\r\n            let yp = kingPosY + (j * i)\r\n            \r\n            if (isInBoard(xp, yp) && !boardModel[xp][yp][currentTurn + \"Controls\"] &&\r\n                    (boardModel[xp][yp].occupier === \"empty\" || \r\n                    boardModel[xp][yp].occupier.split(\"_\")[1] === currentTurn)) {\r\n                kingCanMove = true\r\n            }\r\n        }\r\n    }\r\n\r\n    // Diagnol\r\n    for (let i = -1; i <= 1; i += 2) {\r\n        for (let j = -1; j <= 1; j += 2) {\r\n            let xp = kingPosX + i * j\r\n            let yp = kingPosY + j\r\n            if (isInBoard(xp, yp) && !boardModel[xp][yp][currentTurn + \"Controls\"] &&\r\n                    boardModel[xp][yp].occupier === \"empty\") {\r\n                kingCanMove = true\r\n            }\r\n        }\r\n    }\r\n\r\n    return kingCanMove\r\n}\r\n\r\nfunction findPiecesAttackingKing(kingPosX, kingPosY) {\r\n    let piecesAttacking = []\r\n    // Detecting rook-type attacks\r\n    for (let n = 0; n <= 1; n++) {\r\n        for (let l = -1; l <= 1; l += 2) {\r\n            let k = 1\r\n            let x, y\r\n            // When n = 0, x = i + k * l, and y = j (to go horizontal)\r\n            while (isInBoard(x = (kingPosX + k * l - (k * l * n)), y = (kingPosY + (k * l * n)))\r\n                    && boardModel[x][y].occupier === \"empty\") {\r\n                k++\r\n            }\r\n\r\n            let occupier\r\n            if (isInBoard(x, y)) {\r\n                occupier = boardModel[x][y].occupier\r\n            } else {\r\n                continue // Skip over the last bit if x, y isnt in the board\r\n            }\r\n\r\n            // x and y will now be out of the board or the coordinates of a piece\r\n            if (isInBoard(x, y) && occupier.includes(currentTurn) \r\n                    && (occupier.includes(\"rook\") || occupier.includes(\"queen\"))) {\r\n                piecesAttacking.push([x, y])\r\n            }\r\n        }\r\n    }\r\n\r\n    // Detecting bishop-type attacks\r\n    for (let n = -1; n <= 1; n += 2) {\r\n        for (let l = -1; l <= 1; l += 2) {\r\n            let k = 1\r\n            let x, y\r\n            while (isInBoard(x = (kingPosX + n * (k * l)), y = (kingPosY + k * l))\r\n                && boardModel[x][y].occupier === \"empty\") {\r\n                k++\r\n            }\r\n            let occupier\r\n            if (isInBoard(x, y)) {\r\n                occupier = boardModel[x][y].occupier\r\n            } else {\r\n                continue\r\n            }\r\n\r\n            // x and y will now be out of the board or the coordinates of a piece\r\n            if (occupier.includes(currentTurn)\r\n                    && (occupier.includes(\"bishop\") || occupier.includes(\"queen\") || \r\n                    (occupier.includes(\"pawn\") && k === 1 \r\n                    && y === (kingPosY + (currentTurn === \"white\" ? 1 : -1))))) { // currentTurn is the attacker here\r\n                piecesAttacking.push([x, y])\r\n            }\r\n        }\r\n    }\r\n\r\n    // Detecting knight-type attacks\r\n    for (let n = 0; n <= 1; n++) {\r\n        for (let l = -1; l <= 1; l += 2) {\r\n            for (let k = -1; k <= 1; k += 2) {\r\n                // Horizontal\r\n                let x, y\r\n                // kn - 2ln = n(k - 2l), 2ln - kn = n(2l - k)\r\n                let occupier\r\n                    if (isInBoard(x, y)) {\r\n                        occupier = boardModel[x][y].occupier\r\n                    } else {\r\n                        continue\r\n                    }\r\n                if (isInBoard(x = (kingPosX + l * 2 + n * (k - (2 * l))), \r\n                        y = (kingPosY + k + n * ((2 * l) - k))) \r\n                        && occupier.includes(currentTurn) && occupier.includes(\"knight\")) {\r\n                    piecesAttacking.push([x, y])\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    return piecesAttacking\r\n}\r\n\r\nfunction movePiece(x, y) {\r\n    let tempBoard = modelCopy(boardModel)\r\n\r\n    updateBoard(parseInt(selectedPiece.posX) / 100, parseInt(selectedPiece.posY) / 100,\r\n            parseInt(x) / 100, parseInt(y) / 100, selectedPiece.id)\r\n    detailBoard()\r\n    /* For testing:\r\n    let xp = parseInt(x) / 100\r\n    let yp = parseInt(y) / 100\r\n    console.log(\"Piece moving to: \", xp, yp)\r\n    console.log(\" stats for that square: \", boardModel[xp][yp])\r\n    console.log(\"King in check: \", kingInCheck())\r\n    */\r\n    console.log(getBMString())\r\n    console.log(getControlString())\r\n\r\n    if (!kingCaptures) {\r\n        let attackedKing = kingInCheck()\r\n        \r\n        // Check for includes for this one, because a player could try to move their king such that it'd\r\n        // put both kings into check, which should not be allowed \r\n        if (attackedKing.includes(currentTurn)) {\r\n            boardModel = tempBoard\r\n            detailBoard()\r\n            return false\r\n        } else if (attackedKing === opposite(currentTurn)) {\r\n            console.log(opposite(currentTurn) + \" king is in check!\")\r\n            // Note: currentTurn will be the color of the player that is ATTACKING the king\r\n            let kingColor = opposite(currentTurn)\r\n            // Index 0 of the result will have the x position, 1 will have the y\r\n            let [kingPosX, kingPosY] = findPiece(\"king_\" + kingColor)\r\n            let kingCanMove = canKingMove(kingPosX, kingPosY)\r\n\r\n            if (!kingCanMove) {\r\n                console.log(\"and it can't move!\")\r\n                // This array will have the locations of pieces that are attacking the king \r\n                // in [x, y] pairs\r\n                let piecesAttacking = findPiecesAttackingKing(kingPosX, kingPosY)\r\n                \r\n                // If there are 2 or more pieces attacking the king, then they can't be blocked or taken\r\n                // (because there are 2 to deal with) [Look up info about double checks!]\r\n                if (piecesAttacking.length >= 2) {\r\n                    endGame(currentTurn)\r\n                } else { \r\n                    console.log(\"theres only one piece attacking it\")\r\n                    let attackerX = piecesAttacking[0][0]\r\n                    let attackerY = piecesAttacking[0][1]\r\n                    // Do any defending pieces control the square that the attacker is on?\r\n                    if (!boardModel[attackerX][attackerY][kingColor + \"ControlsStrong\"]) {\r\n                        console.log(\"but nobody can take it!\")\r\n                        // If the knight can't be taken, then its mate\r\n                        if (boardModel[attackerX][attackerY].occupier.includes(\"knight\")) { \r\n                            endGame(currentTurn)\r\n                        } else {\r\n                            let dx = kingPosX - attackerX\r\n                            let dy = kingPosY - attackerY\r\n                            let larger = Math.max(Math.abs(dx), Math.abs(dy))\r\n                            let dxNorm = dx === 0 ? 0 : dx / Math.abs(dx)\r\n                            let dyNorm = dy === 0 ? 0 : dy / Math.abs(dy)\r\n\r\n                            // If the piece can't be taken, it must be blocked\r\n                            let pathBlocked = false\r\n\r\n                            // Check each square on the path to the attacking piece to the king, \r\n                            // non-inclusive\r\n                            console.log(`Checking squares from i to ${larger} now`)\r\n                            for (let i = 1; i < larger; i++) {\r\n                                console.log(\"Checking square: \", attackerX + dxNorm, attackerY + (dyNorm * i))\r\n                                if (boardModel[attackerX + dxNorm][attackerY + (dyNorm * i)][kingColor + \"ControlsStrong\"]) {\r\n                                    console.log(\"attacking piece can be blocked!\")\r\n                                    pathBlocked = true\r\n                                    break\r\n                                }\r\n                            }\r\n\r\n                            if (!pathBlocked) {\r\n                                endGame(currentTurn)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                // then do they control any of the squares on the path from the attacker to the king?\r\n            }\r\n        }\r\n    }\r\n    \r\n    let pieceSetters = setters.get(selectedPiece.id)\r\n    \r\n    pieceSetters.setPositionX(x)\r\n    pieceSetters.setPositionY(y)\r\n    \r\n    selectedPiece = null\r\n    enPassant = null\r\n    setHighlight(false)\r\n    if (flippingBoardEnabled) {\r\n        setCurrentTurn(opposite(currentTurn))\r\n    }\r\n    currentTurn = opposite(currentTurn)\r\n\r\n    return true\r\n}\r\n\r\nfunction movePawn(x, y) {\r\n    let posX = parseInt(selectedPiece.posX)\r\n    let posY = parseInt(selectedPiece.posY)\r\n    let direction = selectedPiece.color === \"black\" ? 1 : -1\r\n    let startingPos = selectedPiece.color === \"black\" ? 100 : 600\r\n    let differenceX = parseInt(x) - posX\r\n    let differenceY = (parseInt(y) - posY) * direction\r\n    \r\n    // Replace the true so that the pawn can only move on its first turn\r\n    if ((differenceX === 0) && (differenceY === 100 )) {\r\n        if (y === (selectedPiece.color === \"black\" ? \"700\" : \"0\")) {\r\n            promotePawn(selectedPiece.id, x)\r\n        }\r\n        return movePiece(x, y)\r\n    } else if ((differenceX === 0) && (differenceY === 200 && posY === startingPos)) {\r\n        if (boardModel[posX / 100][posY / 100 + direction].occupier !== \"empty\") {\r\n            return false\r\n        }\r\n        let enPassantTemp = { // Need to make this null after any other piece moves\r\n            id: selectedPiece.id,\r\n            positionX: selectedPiece.posX,\r\n            positionY: selectedPiece.color === \"black\" ? \"200\" : \"500\"\r\n        }\r\n        let result = movePiece(x, y)\r\n        enPassant = enPassantTemp\r\n        return result\r\n    } else if ((Math.abs(differenceX) === 100) && differenceY === 100 && enPassant !== null &&\r\n            enPassant.positionX === x && enPassant.positionY === y) {\r\n        oSetPieces(oPieces.filter((piece) => piece.id !== enPassant.id))\r\n        return movePiece(x, y)\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nfunction pawnCapture(x, y) {\r\n    let direction = selectedPiece.color === \"black\" ? 1 : -1\r\n    let differenceY = (parseInt(y) - parseInt(selectedPiece.posY)) * direction\r\n    let differenceX = Math.abs(parseInt(x) - parseInt(selectedPiece.posX))\r\n    \r\n    // Replace the true so that the pawn can only move on its first turn\r\n    if ((differenceX === 100) && (differenceY === 100)) {\r\n        if (y === (selectedPiece.color === \"black\" ? \"700\" : \"0\")) {\r\n            promotePawn(selectedPiece.id, x)\r\n        }\r\n        return movePiece(x, y)\r\n    }\r\n\r\n    return false\r\n}\r\n\r\n// Version of the % operator that returns 0 for 0 % 0, also \r\nfunction trplMod(a, b) {\r\n    if (a === 0 && b === 0) {\r\n        return 0\r\n    } else if (a === 0 || b === 0) { // this is possibly bugging\r\n        return 1\r\n    } else {\r\n        return a % b\r\n    }\r\n}\r\n\r\n// Version of the % operator that returns 0 for 0 / 0\r\nfunction trplDivide(a, b) {\r\n    if (a === 0 && b === 0) {\r\n        return 0\r\n    } else {\r\n        return a / b\r\n    }\r\n}\r\n\r\nfunction isTripletMultiple(diffX, diffY, type) {\r\n    // Need to adjust these depending one which side\r\n    let dx = diffX / 100\r\n    let dy = diffY / 100\r\n    let pMovements = defaultPieceMovements\r\n    if (!castlingEnabled && kingCaptures) {\r\n        pMovements = pieceMovements\r\n    }\r\n    let movements = pMovements[type]\r\n    for (let i = 0; i < movements.length; i++) {\r\n        let ux = movements[i][0] // unit x\r\n        let uy = movements[i][1] * (currentTurn === \"black\" ? 1 : -1) // unit y\r\n        let xUnits = trplDivide(dx, ux)\r\n        let yUnits = trplDivide(dy, uy)\r\n        console.log(\"dx, dy:\", dx, dy, \"ux, uy:\",ux, uy)\r\n        if (trplMod(dx, ux) === 0 && trplMod(dy, uy) === 0 && xUnits >= 0 && yUnits >= 0) {\r\n            let maxU = movements[i][2]\r\n            if (Math.abs(xUnits) <= maxU && Math.abs(yUnits) <= maxU && \r\n                    (xUnits === yUnits || xUnits === 0 || yUnits === 0)) {\r\n                console.log(\"Proper move idea\")\r\n                return [ux, uy, Math.abs((xUnits === yUnits || yUnits === 0) ? xUnits : yUnits)]\r\n            }\r\n        }\r\n    }\r\n\r\n    return [null, null, null]\r\n}\r\n\r\nfunction movePieceFilter(x, y, type) {\r\n    let posX = parseInt(selectedPiece.posX)\r\n    let posY = parseInt(selectedPiece.posY)\r\n    let differenceX = parseInt(x) - posX\r\n    let differenceY = parseInt(y) - posY\r\n    \r\n    let [unitX, unitY, units] = isTripletMultiple(differenceX, differenceY, type)\r\n    \r\n    if (unitX != null) {\r\n        for (let i = 1; i < units; i++) {\r\n            if (boardModel[(posX / 100) + i * unitX][posY / 100 + i * unitY].occupier !== \"empty\") {\r\n                console.log(`${selectedPiece.type} blocked by piece at ${(posX / 100) + i * unitX}, ${(posY / 100 + i * unitY)}`)\r\n                return false\r\n            }\r\n        }\r\n\r\n        return movePiece(x, y)\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nfunction moveKing(x, y) {\r\n    let posX = parseInt(selectedPiece.posX)\r\n    let posY = parseInt(selectedPiece.posY)\r\n    let differenceX = parseInt(x) - posX\r\n    let differenceY = parseInt(y) - posY\r\n    let differenceXZero = differenceX === 0\r\n    let differenceYZero = differenceY === 0\r\n    let sideMove = (Math.abs(differenceX) === 100 && differenceYZero) ||\r\n            (differenceXZero && Math.abs(differenceY) === 100)\r\n    let diagnolMove = Math.abs(differenceX) === 100 && Math.abs(differenceY) === 100\r\n\r\n    let colorStats = stats.get(currentTurn)\r\n    \r\n    if (sideMove || diagnolMove) {\r\n        colorStats.kingsideCastling = false\r\n        colorStats.queensideCastling = false\r\n        return movePiece(x, y)\r\n    }\r\n\r\n    let kingsideCastle = differenceYZero && (differenceX >= 200) && colorStats.kingsideCastling\r\n    let queensideCastle = differenceYZero && (differenceX <= -200) && colorStats.queensideCastling\r\n\r\n    if (kingsideCastle) {\r\n        for (let i = 1; i < 3; i++) {\r\n            if (boardModel[posX / 100 + i][posY / 100].occupier !== \"empty\") {\r\n                return false\r\n            }\r\n        }\r\n        movePiece(\"600\", selectedPiece.posY)\r\n        let rookId = \"rook_\" + opposite(currentTurn) + \"_kingside\"\r\n        setters.get(rookId)\r\n            .setPositionX(\"500\")\r\n        let side = currentTurn === \"white\" ? 0 : 7\r\n        updateBoard(7, side, 5, side, rookId)\r\n        colorStats.kingsideCastling = false\r\n        colorStats.queensideCastling = false\r\n        return true\r\n    } else if (queensideCastle) {\r\n        for (let i = 1; i < 4; i++) {\r\n            if (boardModel[posX / 100 - i][posY / 100].occupier !== \"empty\") {\r\n                return false\r\n            }\r\n        }\r\n        movePiece(\"200\", selectedPiece.posY)\r\n        let rookId = \"rook_\" + opposite(currentTurn) + \"_queenside\"\r\n        setters.get(rookId)\r\n            .setPositionX(\"300\")\r\n        let side = currentTurn === \"black\" ? 0 : 7\r\n        updateBoard(0, side, 3, side, rookId)\r\n        colorStats.kingsideCastling = false\r\n        colorStats.queensideCastling = false\r\n        return true\r\n    }\r\n    \r\n    return false\r\n}\r\n\r\nfunction squareSelected(x, y, isCapture) {\r\n    if (selectedPiece !== null) {\r\n        if (selectedPiece.type === \"pawn\") {\r\n            return isCapture ? pawnCapture(x, y) : movePawn(x, y)\r\n        } else if (castlingEnabled && selectedPiece.type === \"king\") {\r\n            return moveKing(x, y)\r\n        } else {\r\n            return movePieceFilter(x, y, selectedPiece.type)\r\n        }\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nfunction makePieces() {\r\n    let result = []\r\n    \r\n    // Make pawns\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 2; j++) {\r\n            let pColor = (j === 0 ? \"black\" : \"white\")\r\n            let pieceId = \"pawn_\" + pColor + \"_\" + (id++).toString()\r\n            result.push({\r\n                id: pieceId,\r\n                img: \"piece-images/\" + (j === 0 ? \"black-pawn.png\" : \"white-pawn.png\"),\r\n                posX: (i * 100).toString(),\r\n                posY: (100 + 500 * j).toString(),\r\n                color: pColor,\r\n                type: \"pawn\"\r\n            })\r\n            updateBoard(-1, -1, i, 1 + 5 * j, pieceId)\r\n        }\r\n    }\r\n\r\n    // Make rooks, knights, and bishops\r\n    for (let i = 0; i < 2; i++) {\r\n        for (let j = 0; j < 2; j++) {\r\n            let pColor = (j === 0 ? \"black\" : \"white\")\r\n            let pSide = i === 0 ? \"queenside\" : \"kingside\"\r\n            let pieceId = \"rook_\" + pColor + \"_\" + pSide\r\n            result.push({\r\n                id: pieceId,\r\n                img: \"piece-images/\" + (j === 0 ? \"black-rook.png\" : \"white-rook.png\"),\r\n                posX: (0 + 700 * i).toString(),\r\n                posY: (700 * j).toString(),\r\n                color: pColor,\r\n                type: \"rook\",\r\n                side: pSide\r\n            })\r\n            updateBoard(-1, -1, 7 * i, 7 * j, pieceId)\r\n        }\r\n        for (let j = 0; j < 2; j++) {\r\n            let pColor = (j === 0 ? \"black\" : \"white\")\r\n            let pSide = i === 0 ? \"queenside\" : \"kingside\"\r\n            let pieceId = \"knight_\" + pColor + \"_\" + pSide\r\n            result.push({\r\n                id: pieceId,\r\n                img: \"piece-images/\" + (j === 0 ? \"black-knight.png\" : \"white-knight.png\"),\r\n                posX: (100 + 500 * i).toString(),\r\n                posY: (700 * j).toString(),\r\n                color: pColor,\r\n                type: \"knight\",\r\n                side: pSide\r\n            })\r\n            updateBoard(-1, -1, 1 + 5 * i, 7 * j, pieceId)\r\n        }\r\n        for (let j = 0; j < 2; j++) {\r\n            let pColor = (j === 0 ? \"black\" : \"white\")\r\n            let pSide = i === 0 ? \"queenside\" : \"kingside\"\r\n            let pieceId = \"bishop_\" + pColor + \"_\" + pSide\r\n            result.push({\r\n                id: pieceId,\r\n                img: \"piece-images/\" + (j === 0 ? \"black-bishop.png\" : \"white-bishop.png\"),\r\n                posX: (200 + 300 * i).toString(),\r\n                posY: (700 * j).toString(),\r\n                color: pColor,\r\n                type: \"bishop\",\r\n                side: pSide\r\n            })\r\n            updateBoard(-1, -1, 2 + 3 * i, 7 * j, pieceId)\r\n        }\r\n    }\r\n\r\n    // Make kings and queens\r\n    for (let j = 0; j < 2; j++) {\r\n        let pColor = (j === 0 ? \"black\" : \"white\")\r\n        let pieceId = \"queen_\" + pColor + \"_\" + (id++).toString()\r\n        result.push({\r\n            id: pieceId,\r\n            img: \"piece-images/\" + (j === 0 ? \"black-queen.png\" : \"white-queen.png\"),\r\n            posX: \"300\",\r\n            posY: (700 * j).toString(),\r\n            color: (j === 0 ? \"black\" : \"white\"),\r\n            type: \"queen\"\r\n        })\r\n        updateBoard(-1, -1, 3, 7 * j, pieceId)\r\n    }\r\n    for (let j = 0; j < 2; j++) {\r\n        let pColor = (j === 0 ? \"black\" : \"white\")\r\n        let pieceId = \"king_\" + pColor\r\n        result.push({\r\n            id: pieceId,\r\n            img: \"piece-images/\" + (j === 0 ? \"black-king.png\" : \"white-king.png\"),\r\n            posX: \"400\",\r\n            posY: (700 * j).toString(),\r\n            color: (j === 0 ? \"black\" : \"white\"),\r\n            type: \"king\"\r\n        })\r\n        updateBoard(-1, -1, 4, 7 * j, pieceId)\r\n    }\r\n    detailBoard()\r\n\r\n    return result\r\n}\r\n\r\nfunction pieceSelected(pieceId, x, y, pieceColor, pieceType, highlightPiece) {\r\n    if (gameState !== \"game running\") {\r\n        return\r\n    }\r\n    if (selectedPiece == null) {\r\n        if (pieceColor === currentTurn) {\r\n            selectedPiece = {\r\n                id: pieceId,\r\n                color: pieceColor,\r\n                type: pieceType,\r\n                posX: x,\r\n                posY: y\r\n            }\r\n            setHighlight = highlightPiece\r\n            highlightPiece(true)\r\n        }\r\n    } else if (selectedPiece.id === pieceId) {\r\n        selectedPiece = null\r\n        highlightPiece(false)\r\n    } else { // Piece trying to capture another piece (color unknown)\r\n        if (pieceColor !== selectedPiece.color) {\r\n            if (squareSelected(x, y, true)) {\r\n                oSetPieces(oPieces.filter((piece) => piece.id !== pieceId))\r\n                if (pieceType === \"king\") {\r\n                    endGame(opposite(pieceColor))\r\n                }\r\n            }\r\n        } else {\r\n            setHighlight(false)\r\n            selectedPiece = {\r\n                id: pieceId,\r\n                color: pieceColor,\r\n                type: pieceType,\r\n                posX: x,\r\n                posY: y\r\n            }\r\n\r\n            setHighlight = highlightPiece\r\n            highlightPiece(true)\r\n        }\r\n    }\r\n}\r\n\r\nlet setCurrentTurn\r\nconst Board = (props) => {\r\n    let squares = []\r\n    const [pieces, setPieces] = useState(originalPieces)\r\n    const [turnColor, setTurnColor] = useState(\"white\")\r\n    let flipBoard = turnColor === \"white\" ? 0 : 700\r\n    \r\n    setCurrentTurn = setTurnColor\r\n    oPieces = pieces\r\n    oSetPieces = setPieces\r\n    endMatch = props.matchEnded\r\n\r\n    kingCaptures = !props.checkEnabled\r\n    castlingEnabled = props.castlingEnabled\r\n    flippingBoardEnabled = props.flippingEnabled\r\n    pieceMovements = props.moveTypes\r\n\r\n    useEffect(() => {\r\n        if (props.gameDrawn) {\r\n            endGame(\"draw\")\r\n        }\r\n    })\r\n    \r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            let newSquare = {\r\n                color: (i + j) % 2 === 0 ? \"light-square\" : \"dark-square\",\r\n                sizeX: (100 / 8).toString() + \"%\",\r\n                sizeY: (100 / 8).toString() + \"%\",\r\n                posX: (Math.abs(flipBoard - j * 100)).toString(),\r\n                posY: (Math.abs(flipBoard - i * 100)).toString(),\r\n                id: \"square_\" + ((i + 1).toString()).padStart(2, \"0\") +\r\n                     ((j + 1).toString()).padStart(2, \"0\")\r\n            }\r\n\r\n            squares.push(newSquare)\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div style={{\r\n            position: \"absolute\",\r\n            height: \"100vh\",\r\n            width: \"80vw\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            backgroundColor: \"rgb(20, 20, 20)\",\r\n        }}>\r\n        <div style={boardStyle}>\r\n            {squares.map((square) => (\r\n                <Square color={square.color} width={square.sizeX} height={square.sizeY} \r\n                posX={square.posX} posY={square.posY} key={square.id} selectSquare={squareSelected}\r\n                boardFlip={flipBoard}/>\r\n            ))}\r\n            {pieces.map((piece) => (\r\n                <Piece key={piece.id} img={piece.img} sizeX=\"12.5%\" sizeY=\"12.5%\" color={piece.color}\r\n                type={piece.type} posX={piece.posX} posY={piece.posY} id={piece.id} boardFlip={flipBoard}\r\n                selectPiece={pieceSelected} addSetter={addSetter} gameState={gameState}/>\r\n            ))}\r\n            \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst boardStyle = {\r\n    width: \"100vmin\",\r\n    height: \"100vmin\",\r\n    backgroundColor: \"gray\",\r\n    position: \"relative\",\r\n}\r\n\r\nexport default Board","import \"./Square.css\"\r\nimport React from \"react\"\r\n\r\nconst Square = (props) => {\r\n    let posX = (Math.abs(props.boardFlip - parseInt(props.posX))).toString()\r\n    let posY = (Math.abs(props.boardFlip - parseInt(props.posY))).toString()\r\n    return (\r\n        <div className={props.color + \" square\"} onClick={() => props.selectSquare(posX, posY)} style={{\r\n            width: props.width.toString(),\r\n            height: props.height.toString(),\r\n            transform: \"translate(\" + props.posX + \"%,\" + props.posY + \"%)\",\r\n            position: \"absolute\",\r\n        }}></div>\r\n    )\r\n}\r\n\r\nexport default Square","import React, { useState } from \"react\"\r\n\r\nconst Piece = (props) => {\r\n    const [positionX, setPositionX] = useState(props.posX)\r\n    const [positionY, setPositionY] = useState(props.posY)\r\n    const [background, setBackground] = useState(\"rgba(27, 143, 166, 0)\")\r\n\r\n    // console.log(\"Hi this is\", props.id, \"located at\", positionX, positionY, \"or\", props.posX, props.posY)\r\n    function highlightPiece(isSelected) {\r\n        if (isSelected) {\r\n            setBackground(\"rgba(27, 143, 166, 1)\")\r\n        } else {\r\n            setBackground(\"rgba(27, 143, 166, 0)\")\r\n        }\r\n    }\r\n    props.addSetter(props.id, setPositionX, setPositionY)\r\n    let posY = (Math.abs(props.boardFlip - parseInt(positionY))).toString()\r\n    let posX = (Math.abs(props.boardFlip - parseInt(positionX))).toString()\r\n\r\n    return (\r\n        <img src={props.img} alt={props.id} \r\n            onClick={() => props.selectPiece(props.id, positionX, positionY, props.color, props.type, \r\n                highlightPiece)} \r\n            style={{\r\n                transform: \"translate(\" + posX + \"%,\" + posY + \"%)\",\r\n                //filter: \"brightness(\" + props.color === \"white\" ? \"100%)\" : \"20%)\",\r\n                position: \"absolute\",\r\n                width: props.sizeX,\r\n                height: props.sizeY,\r\n                backgroundColor: background\r\n        }} />\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Piece","import \"./btn.css\"\r\nimport \"./WinAnnouncement.css\"\r\nimport React from \"react\"\r\n\r\nfunction capitalizeFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1)\r\n}\r\n\r\nconst WinAnnouncement = (props) => {\r\n    let txt = \"\"\r\n    if (props.color === \"draw\") {\r\n        txt = \"Game drawn!\"\r\n    } else {\r\n        txt = capitalizeFirst(props.color) + \" wins!\"\r\n    }\r\n\r\n    let secondClass = props.showWin ? \"show\" : \"hide\"\r\n    return (\r\n        <div className={\"win-announcement \" + secondClass}>\r\n            <p>{txt}</p>\r\n            <button className=\"btn\" onClick={props.reset}>Restart</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default WinAnnouncement","import \"./controlbar.css\"\r\nimport React from \"react\"\r\n\r\nconst DrawBtn = (props) => {\r\n    return (\r\n        <div className=\"draw\">\r\n            Click here if both players agree to draw!\r\n        <button onClick={props.drawGame}> Draw </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DrawBtn","import React, { useState } from \"react\"\r\nimport \"./controlbar.css\"\r\n\r\nlet key = 0\r\nlet pieceMovements = {\r\n    rook: [[1, 0, 8], [-1, 0, 8], [0, 1, 8], [0, -1, 8]],\r\n    bishop: [[1, 1, 8], [-1, -1, 8], [1, -1, 8], [-1, 1, 8]],\r\n    knight: [[1, 2, 1], [-1, 2, 1], [1, -2, 1], [-1, -2, 1], \r\n    [2, 1, 1], [2, -1, 1], [-2, 1, 1], [-2, -1, 1]],\r\n    king: [[1, 0, 1], [-1, 0, 1], [0, 1, 1], [0, -1, 1], \r\n    [1, 1, 1], [-1, -1, 1], [1, -1, 1], [-1, 1, 1]],\r\n    queen: [[1, 0, 8], [-1, 0, 8], [0, 1, 8], [0, -1, 8], \r\n    [1, 1, 8], [-1, -1, 8], [1, -1, 8], [-1, 1, 8]]\r\n}\r\n\r\nfunction createInitialState(type) {\r\n    let initialState = []\r\n    let movements = pieceMovements[type]\r\n    for (let i = 0; i < movements.length; i++) {\r\n        initialState.push({\r\n            id: key++,\r\n            x: movements[i][0],\r\n            y: movements[i][1],\r\n            maxu: movements[i][2]\r\n        })\r\n    }\r\n\r\n    return initialState\r\n}\r\n\r\nconst MoveSettings = (props) => {\r\n    const [showSettings, setShowSettings] = useState(false)\r\n    const [triplets, setTriplets] = useState(createInitialState(props.type))\r\n    let secondClass = showSettings ? \"show\" : \"hide\"\r\n    return (\r\n        <>\r\n            <button className=\"change-btn\" onClick={() => {setShowSettings(!showSettings)}}> \r\n                Change move settings for the {props.type}\r\n            </button>\r\n            <div className={\"piece-settings \" + secondClass}>\r\n                {triplets.map((triplet) => (\r\n                    <div className=\"setting-triplet\" key={triplet.id}>\r\n                        <div>Unit x:<input type=\"number\" className=\"setting-input\" \r\n                            min=\"-8\" max=\"8\" value={triplet.x} \r\n                            onChange={(e) => setTriplets(triplets.map((t) => {\r\n                                if (t.id === triplet.id) {\r\n                                    return {id: t.id, x: e.target.value, y: t.y, maxu: t.maxu}\r\n                                } else{\r\n                                    return t\r\n                                }\r\n                            }))}></input></div>\r\n                        <div>Unit y:<input type=\"number\" className=\"setting-input\"\r\n                            min=\"-8\" max=\"8\" value={triplet.y} \r\n                            onChange={(e) => setTriplets(triplets.map((t) => {\r\n                                if (t.id === triplet.id) {\r\n                                    return {id: t.id, x: t.x, y: e.target.value, maxu: t.maxu}\r\n                                } else{\r\n                                    return t\r\n                                }\r\n                            }))}></input></div>\r\n                        <div>Max units:<input type=\"number\" className=\"setting-input\"\r\n                            min=\"0\" max=\"8\" value={triplet.maxu} \r\n                            onChange={(e) => setTriplets(triplets.map((t) => {\r\n                                if (t.id === triplet.id) {\r\n                                    return {id: t.id, x: t.x, y: t.y, maxu: e.target.value}\r\n                                } else{\r\n                                    return t\r\n                                }\r\n                            }))}></input></div>\r\n                        <div onClick={() => setTriplets(triplets.filter((t) => triplet.id !== t.id))}\r\n                            className=\"delete-btn\">&#10006;</div>\r\n                    </div>\r\n                ))}\r\n                <div className=\"add-btn\" onClick={() => setTriplets([...triplets, {id: key++, x: 0, \r\n                y: 0, maxu: 0}])}>&#10010;</div>\r\n                <button onClick={() => {\r\n                    setShowSettings(false)\r\n                    props.sendTriplets(triplets, props.type)\r\n                }}>Save</button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MoveSettings","import React from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nconst Tutorial = () => {\r\n    let [showTutorial, setShowTutorial] = useState(false)\r\n\r\n    let secondClass = showTutorial ? \"show\" : \"hide\"\r\n    return (\r\n        <>\r\n            <button onClick={() => setShowTutorial(!showTutorial)}>\r\n                Guide for customizing piece moves\r\n            </button>\r\n            <div className={\"piece-settings \" + secondClass}>\r\n                Important note: Piece movement customizations will not work unless castling and\r\n                check/checkmate detection are both turned off!\r\n                <br/>\r\n                Piece movement patterns are made up of one or more triplets that contain three main \r\n                values in each triplet: x; this determines the unit x value, y; this determines\r\n                the unit y value, max units; this determines how many unit xs and unit ys the piece \r\n                can go at most. For example, for the triplet in the rook x: 0, y: 1, max units: 8, \r\n                this triplet says that the rook can go in the positive y direction one at a time, \r\n                cannot go into the x direction in that same move, and can do that up to 8 times in \r\n                one move. So, it says the rook can move in the positive y direction. If it was instead\r\n                x: 0, y: 2, max units: 4, the rook could only move upwards in multiples of 2, and\r\n                could jump over every other piece. Essentially, each triplet is an option that the \r\n                piece has when moving.\r\n                <br />\r\n                <button onClick={() => setShowTutorial(false)}>Close</button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Tutorial","import DrawBtn from \"./DrawBtn\"\r\nimport MoveSettings from \"./MoveSettings\"\r\nimport Tutorial from \"./Tutorial\"\r\nimport React from \"react\"\r\n\r\nconst ControlBar = (props) => {\r\n    return (\r\n        <div className=\"control-bar\">\r\n            <DrawBtn drawGame={props.drawGame}/>\r\n            <button onClick={() => {\r\n                props.changeChecks(!props.checkEnabled)\r\n            }}>{props.checkEnabled ? \"Disable\" : \"Enable\"} check/checkmate detection</button>\r\n            <button onClick={() => {props.changeCastling(!props.castlingEnabled)}}>\r\n                {props.castlingEnabled ? \"Disable\" : \"Enable\"} castling\r\n            </button>\r\n            <button onClick={() => {props.changeFlipping(!props.flippingEnabled)}}>\r\n                {props.flippingEnabled ? \"Disable\" : \"Enable\"} board flipping each turn\r\n            </button>\r\n            <MoveSettings type=\"rook\" sendTriplets={props.sendTriplets}/>\r\n            <MoveSettings type=\"knight\" sendTriplets={props.sendTriplets}/>\r\n            <MoveSettings type=\"bishop\" sendTriplets={props.sendTriplets}/>\r\n            <MoveSettings type=\"queen\" sendTriplets={props.sendTriplets}/>\r\n            <MoveSettings type=\"king\" sendTriplets={props.sendTriplets}/>\r\n            <Tutorial />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ControlBar","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}