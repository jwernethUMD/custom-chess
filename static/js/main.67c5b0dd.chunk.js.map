{"version":3,"sources":["App.js","components/Board.js","components/Square.js","components/Piece.js","components/WinAnnouncement.js","components/DrawBtn.js","components/MoveSettings.js","components/ControlBar.js","reportWebVitals.js","index.js"],"names":["oRestart","pieceMovements","rook","bishop","knight","king","queen","appStyle","backgroundColor","App","_useState","useState","_useState2","Object","C_Users_jason_OneDrive_Desktop_Projects_chess_project_react_react_chess_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","showWin","setShowWin","_useState3","_useState4","color","setColor","_useState5","_useState6","gameDrawn","setGameDrawn","_useState7","_useState8","checkEnabled","setCheckEnabled","_useState9","_useState10","castlingEnabled","setCastlingEnabled","_useState11","_useState12","flippingEnabled","setFlippingEnabled","_useState13","_useState14","moveTypes","setMoveTypes","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","style","className","_components_Board__WEBPACK_IMPORTED_MODULE_2__","matchEnded","restart","_components_WinAnnouncement__WEBPACK_IMPORTED_MODULE_3__","reset","_components_ControlBar__WEBPACK_IMPORTED_MODULE_4__","drawGame","changeCastling","changeChecks","checksEnabled","changeFlipping","flipsEnabled","sendTriplets","triplets","type","newTriplets","newMoves","global","structuredClone","i","length","newTriplet","push","x","y","maxu","changeMoveTypes","oPieces","oSetPieces","endMatch","kingCaptures","flippingBoardEnabled","selectedPiece","setHighlight","console","error","boardModel","currentTurn","setters","Map","stats","enPassant","gameState","id","set","kingsideCastling","queensideCastling","j","occupier","whiteControls","blackControls","whiteControlsStrong","blackControlsStrong","setCurrentTurn","originalPieces","makePieces","findPiece","opposite","forEach","v","pieceId","position","setPositionX","toString","setPositionY","endGame","addSetter","setPosX","setPosY","isInBoard","updateBoard","x1","y1","x2","y2","rookControls","n","l","k","square","includes","bishopControls","detailBoard","idArr","split","direction","promotePawn","pawnId","map","piece","positY","pawnSetters","get","delete","posX","posY","img","movePiece","tempBoard","result","modelCopy","parseInt","log","substring","padEnd","getBMString","getControlString","attackedKing","kingsInCheck","kingInCheck","kingColor","_findPiece","_findPiece2","kingPosX","kingPosY","kingCanMove","xp","yp","canKingMove","piecesAttacking","findPiecesAttackingKing","attackerX","attackerY","dx","dy","larger","Math","max","abs","dxNorm","dyNorm","pathBlocked","concat","pieceSetters","trplMod","b","trplDivide","movePieceFilter","_isTripletMultiple","diffX","diffY","movements","ux","uy","xUnits","yUnits","maxU","isTripletMultiple","_isTripletMultiple2","unitX","unitY","units","squareSelected","isCapture","differenceY","pawnCapture","startingPos","differenceX","enPassantTemp","positionX","positionY","filter","movePawn","differenceXZero","differenceYZero","sideMove","diagnolMove","colorStats","kingsideCastle","queensideCastle","rookId","side","moveKing","pColor","pSide","pieceSelected","pieceColor","pieceType","highlightPiece","boardStyle","width","height","Board","props","squares","pieces","setPieces","turnColor","setTurnColor","flipBoard","useEffect","newSquare","sizeX","sizeY","padStart","react__WEBPACK_IMPORTED_MODULE_3___default","display","justifyContent","_Square__WEBPACK_IMPORTED_MODULE_1__","key","selectSquare","boardFlip","_Piece__WEBPACK_IMPORTED_MODULE_2__","selectPiece","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_1__","Square","onClick","transform","Piece","background","setBackground","isSelected","src","alt","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","WinAnnouncement","str","txt","charAt","toUpperCase","slice","secondClass","DrawBtn","react_default","MoveSettings","slicedToArray","showSettings","setShowSettings","initialState","createInitialState","setTriplets","triplet","min","value","onChange","e","t","target","toConsumableArray","ControlBar","components_DrawBtn","components_MoveSettings","reportWebVitals","onPerfEntry","Function","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.67c5b0dd.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Board from \"./components/Board\";\nimport WinAnnouncement from \"./components/WinAnnouncement\"\nimport ControlBar from \"./components/ControlBar\"\n\nlet oRestart\n\n// Default piece movements\nlet pieceMovements = {\n  rook: [[1, 0, 8], [-1, 0, 8], [0, 1, 8], [0, -1, 8]],\n  bishop: [[1, 1, 8], [-1, -1, 8], [1, -1, 8], [-1, 1, 8]],\n  knight: [[1, 2, 1], [-1, 2, 1], [1, -2, 1], [-1, -2, 1], \n  [2, 1, 1], [2, -1, 1], [-2, 1, 1], [-2, -1, 1]],\n  king: [[1, 0, 1], [-1, 0, 1], [0, 1, 1], [0, -1, 1], \n  [1, 1, 1], [-1, -1, 1], [1, -1, 1], [-1, 1, 1]],\n  queen: [[1, 0, 8], [-1, 0, 8], [0, 1, 8], [0, -1, 8], \n  [1, 1, 8], [-1, -1, 8], [1, -1, 8], [-1, 1, 8]]\n}\n\nfunction App() {\n  const [showWin, setShowWin] = useState(false)\n  const [color, setColor] = useState(\"None\")\n  const [gameDrawn, setGameDrawn] = useState(false)\n  const [checkEnabled, setCheckEnabled] = useState(true)\n  const [castlingEnabled, setCastlingEnabled] = useState(true)\n  const [flippingEnabled, setFlippingEnabled] = useState(false)\n  const [moveTypes, setMoveTypes] = useState(pieceMovements)\n  \n  function matchEnded(color, restart) {\n    setColor(color)\n    setShowWin(true)\n    oRestart = restart\n  }\n\n  function reset() {\n    oRestart()\n    setShowWin(false)\n    setGameDrawn(false)\n  }\n\n  function drawGame() {\n    setGameDrawn(true)\n  }\n\n  function changeCastling(castlingEnabled) {\n    setCastlingEnabled(castlingEnabled)\n  }\n\n  function changeChecks(checksEnabled) {\n    setCheckEnabled(checksEnabled)\n  }\n\n  function changeFlipping(flipsEnabled) {\n    setFlippingEnabled(flipsEnabled)\n  }\n\n  function changeMoveTypes(newTriplets, type) {\n    let newMoves = global.structuredClone(moveTypes)\n    newMoves[type] = []\n    for (let i = 0; i < newTriplets.length; i++) {\n      let newTriplet = newTriplets[i]\n      newMoves[type].push([newTriplet.x, newTriplet.y, newTriplet.maxu])\n    }\n    \n    return newMoves\n  }\n\n  function tripletsReceived(triplets, type) {\n    setMoveTypes(changeMoveTypes(triplets, type))\n  }\n\n  return (\n    <div style={appStyle} className=\"App\">\n      <Board matchEnded={matchEnded} gameDrawn={gameDrawn} checkEnabled={checkEnabled}\n      castlingEnabled={castlingEnabled} flippingEnabled={flippingEnabled} moveTypes={moveTypes}/>\n      <WinAnnouncement showWin={showWin} color={color} reset={reset}/>\n      <ControlBar drawGame={drawGame} changeCastling={changeCastling} changeChecks={changeChecks}\n      changeFlipping={changeFlipping} checkEnabled={checkEnabled} castlingEnabled={castlingEnabled}\n      flippingEnabled={flippingEnabled} sendTriplets={tripletsReceived}/>\n    </div>\n  );\n}\n\nconst appStyle = {\n  backgroundColor: \"rgb(20, 20, 20)\",\n}\n\nexport default App;\n","import Square from \"./Square\"\r\nimport Piece from \"./Piece\"\r\nimport React, { useEffect, useState } from \"react\"\r\n\r\n// Making kingCaptures true disables check/checkmate detection! Capturing the king is required to\r\n// win!\r\nlet kingCaptures = false\r\nlet castlingEnabled = true\r\nlet flippingBoardEnabled = false\r\n// Create a function that changes the selectedPiece, and pass it to the child, so that when the child\r\n// is clicked on, the selectedPiece updates wooo!! wow\r\nlet selectedPiece = null // = id of the piece(its key in the map)\r\nlet setHighlight = () => console.error(\"No piece selected\")\r\nlet boardModel = []\r\nlet currentTurn = \"white\"\r\nlet setters = new Map()\r\nlet stats = new Map()\r\n// If a pawn moves two forward, then information about that pawn is stored in this variable for the\r\n// next turn in case it can be en passanted\r\nlet enPassant = null\r\nlet gameState = \"game running\"\r\nlet id = 0\r\n// o stands for outer\r\nlet oPieces, oSetPieces\r\nlet endMatch\r\n// Keep track of basic stats for each color\r\nstats.set(\"white\", {\r\n    kingsideCastling: castlingEnabled,\r\n    queensideCastling: castlingEnabled,\r\n})\r\nstats.set(\"black\", {\r\n    kingsideCastling: castlingEnabled,\r\n    queensideCastling: castlingEnabled,\r\n})\r\n\r\nfor (let i = 0; i < 8; i++) {\r\n    boardModel[i] = []\r\n    for (let j = 0; j < 8; j++) {\r\n        // The first part of this pair indicates the piece thats on the square, whereas the second\r\n        // indicates which color controls that square\r\n        boardModel[i][j] = {\r\n            occupier: \"empty\",\r\n            whiteControls: false,\r\n            blackControls: false,\r\n            whiteControlsStrong: false, // whiteControlsStrong means a white piece that isn't the king controls the square\r\n            blackControlsStrong: false\r\n        }\r\n    }\r\n}\r\n\r\n// Piece movement patterns are made up of one or more triplets that contain three main values\r\n// in each triplet array: x; this determines the unit x value, y; this determines the unit y value,\r\n// max units; this determines how many unit xs and unit ys the piece can go at most. For example,\r\n// for the triplet in the rook [0, 1, 8], this triplet says that the rook can go in the positive y\r\n// direction one at a time, cannot go into the x direction in that same move, and can do that up to\r\n// 8 times in one move. So, it says the rook can move in the positive y direction.\r\nlet pieceMovements = {\r\n    rook: [[1, 0, 8], [-1, 0, 8], [0, 1, 8], [0, -1, 8]],\r\n    bishop: [[1, 1, 8], [-1, -1, 8], [1, -1, 8], [-1, 1, 8]],\r\n    knight: [[1, 2, 1], [-1, 2, 1], [1, -2, 1], [-1, -2, 1], \r\n    [2, 1, 1], [2, -1, 1], [-2, 1, 1], [-2, -1, 1]],\r\n    king: [[1, 0, 1], [-1, 0, 1], [0, 1, 1], [0, -1, 1], \r\n    [1, 1, 1], [-1, -1, 1], [1, -1, 1], [-1, 1, 1]],\r\n    queen: [[1, 0, 8], [-1, 0, 8], [0, 1, 8], [0, -1, 8], \r\n    [1, 1, 8], [-1, -1, 8], [1, -1, 8], [-1, 1, 8]]\r\n}\r\n\r\n// Only want to make all the pieces once for each game\r\nlet originalPieces = makePieces()\r\n\r\n// Returns a string that represents the board model (for testing)\r\nfunction getBMString() {\r\n    let result = \"\"\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            let thing = boardModel[j][i].occupier.substring(0, 5)\r\n            result += thing.padEnd(6, \" \")\r\n        }\r\n        result += \"\\n\"\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nfunction getControlString() {\r\n    let result = \"\"\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            result += \"(\"\r\n            if (boardModel[j][i].whiteControls) {\r\n                result += \"W\"\r\n            } else {\r\n                result += \"-\"\r\n            }\r\n            result += \", \"\r\n            if (boardModel[j][i].blackControls) {\r\n                result += \"B\"\r\n            } else {\r\n                result += \"-\"\r\n            }\r\n            result += \"),\"\r\n        }\r\n        result += \"\\n\"\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nfunction modelCopy() {\r\n    let result = []\r\n    for (let i = 0; i <= 7; i++) {\r\n        result[i] = []\r\n        for (let j = 0; j <= 7; j++) {\r\n            result[i][j] = global.structuredClone(boardModel[i][j])\r\n        }\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nfunction findPiece(id) {\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            if (boardModel[i][j].occupier === id) {\r\n                return [i, j]\r\n            }\r\n        }\r\n    }\r\n\r\n    return null\r\n}\r\n\r\n// Returns the color of the kings that are in check or returns \"\"\r\nfunction kingInCheck() {\r\n    let kingsInCheck = \"\"\r\n    for (let i = 0; i <= 7; i++) {\r\n        for (let j = 0; j <= 7; j++) {\r\n            let idArr = boardModel[i][j].occupier.split(\"_\")\r\n            let type = idArr[0]\r\n            let color = idArr[1]\r\n            if (type === \"king\") {\r\n                if (boardModel[i][j][opposite(color) + \"Controls\"]) {\r\n                    kingsInCheck += color\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    return kingsInCheck\r\n}\r\n\r\nfunction opposite(color) {\r\n    return color === \"white\" ? \"black\" : \"white\"\r\n}\r\n\r\nfunction restart() {\r\n    id = 0\r\n    stats.set(\"white\", {\r\n        kingsideCastling: castlingEnabled,\r\n        queensideCastling: castlingEnabled,\r\n    })\r\n    stats.set(\"black\", {\r\n        kingsideCastling: castlingEnabled,\r\n        queensideCastling: castlingEnabled,\r\n    })\r\n    for (let i = 0; i < 8; i++) {\r\n        boardModel[i] = []\r\n        for (let j = 0; j < 8; j++) {\r\n            // The first part of this pair indicates the piece thats on the square, whereas the second\r\n            // indicates which color controls that square\r\n            boardModel[i][j] = {\r\n                occupier: \"empty\",\r\n                whiteControls: false,\r\n                blackControls: false,\r\n                whiteControlsStrong: false, // whiteControlsStrong means a white piece that isn't the king controls the square\r\n                blackControlsStrong: false\r\n            }\r\n        }\r\n    }\r\n    originalPieces = makePieces()\r\n    oPieces = originalPieces\r\n    oSetPieces(originalPieces)\r\n    setters.forEach((v, pieceId) => {\r\n        let position = findPiece(pieceId)\r\n        if (position != null) {\r\n            v.setPositionX((position[0] * 100).toString())\r\n            v.setPositionY((position[1] * 100).toString())\r\n        }\r\n    })\r\n    if (flippingBoardEnabled) {\r\n        setCurrentTurn(\"white\")\r\n    }\r\n    currentTurn = \"white\"\r\n    gameState = \"game running\"\r\n}\r\n\r\nfunction endGame(color) {\r\n    gameState = \"game ended\"\r\n    endMatch(color, restart)\r\n}\r\n\r\nfunction addSetter(pieceId, setPosX, setPosY) {\r\n    setters.set(pieceId, {setPositionX: setPosX, setPositionY: setPosY})\r\n}\r\n\r\nfunction isInBoard(x, y) {\r\n    return x >= 0 && x <= 7 && y >= 0 && y <= 7\r\n}\r\n\r\n// Adds/moves a piece on the board\r\nfunction updateBoard(x1, y1, x2, y2, id) {\r\n    if (x1 >= 0 && y1 >= 0) {\r\n        boardModel[x1][y1].occupier = \"empty\"\r\n    }\r\n\r\n    boardModel[x2][y2].occupier = id\r\n}\r\n\r\nfunction rookControls(i, j, color) {\r\n    for (let n = 0; n <= 1; n++) {\r\n        for (let l = -1; l <= 1; l += 2) {\r\n            let k = 1\r\n            let x, y\r\n            // When n = 0, x = i + k * l, and y = j (to go horizontal)\r\n            while (isInBoard(x = (i + k * l - (k * l * n)), y = (j + (k * l * n)))) {\r\n                let square = boardModel[x][y]\r\n                let occupier = square.occupier\r\n                square[color + \"Controls\"] = true\r\n                square[color + \"ControlsStrong\"] = true\r\n                if (occupier !== \"empty\" && \r\n                        !(occupier.includes(\"king_\") && occupier.includes(opposite(color)))) {\r\n                    break\r\n                }\r\n                k++\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction bishopControls(i, j, color) {\r\n    // Bishop on the upward-right diagnol when n = 1, on upward-left when n = -1\r\n    for (let n = -1; n <= 1; n += 2) {\r\n        for (let l = -1; l <= 1; l += 2) {\r\n            let k = 1\r\n            let x, y\r\n            while (isInBoard(x = (i + n * (k * l)), y = (j + k * l))) {\r\n                let square = boardModel[x][y]\r\n                square[color + \"Controls\"] = true\r\n                square[color + \"ControlsStrong\"] = true\r\n                if (boardModel[x][y].occupier !== \"empty\") {\r\n                    break\r\n                }\r\n                k++\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction detailBoard() {\r\n    // Reset the controllers of the board\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            boardModel[i][j].whiteControls = false\r\n            boardModel[i][j].whiteControlsStrong = false\r\n            boardModel[i][j].blackControls = false\r\n            boardModel[i][j].blackControlsStrong = false\r\n        }\r\n    }\r\n\r\n    // Repopulate\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            let idArr = boardModel[i][j].occupier.split(\"_\")\r\n            let type = idArr[0]\r\n            let color = idArr[1]\r\n            switch (type) {\r\n                case \"empty\":\r\n                    break\r\n                case \"pawn\":\r\n                    let direction = color === \"black\" ? 1 : -1\r\n                    if (isInBoard(i + 1, j + direction)) {\r\n                        let square = boardModel[i + 1][j + direction]\r\n                        square[color + \"Controls\"] = true\r\n                        square[color + \"ControlsStrong\"] = true\r\n                    }\r\n                    if (isInBoard(i - 1, j + direction)) {\r\n                        let square = boardModel[i - 1][j + direction]\r\n                        square[color + \"Controls\"] = true\r\n                        square[color + \"ControlsStrong\"] = true\r\n                    }\r\n                    break\r\n                case \"rook\":\r\n                    rookControls(i, j, color)\r\n                    break\r\n                case \"knight\":\r\n                    // 8(or 2^3) combinations in total (a knight has 8 valid moves)\r\n                    for (let n = 0; n <= 1; n++) {\r\n                        for (let l = -1; l <= 1; l += 2) {\r\n                            for (let k = -1; k <= 1; k += 2) {\r\n                                // Horizontal\r\n                                let x, y\r\n                                // kn - 2ln = n(k - 2l), 2ln - kn = n(2l - k)\r\n                                if (isInBoard(x = (i + l * 2 + n * (k - (2 * l))), \r\n                                        y = (j + k + n * ((2 * l) - k)))) {\r\n                                    boardModel[x][y][color + \"Controls\"] = true\r\n                                    boardModel[x][y][color + \"ControlsStrong\"] = true\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    break\r\n                case \"bishop\":\r\n                    bishopControls(i, j, color)\r\n                    break\r\n                case \"queen\":\r\n                    rookControls(i, j, color)\r\n                    bishopControls(i, j, color)\r\n                    break\r\n                case \"king\":\r\n                    // Sideways\r\n                    for (let n = 0; n <= 1; n++) {\r\n                        for (let l = -1; l <= 1; l += 2) {\r\n                            let x, y\r\n                            if (isInBoard(x = (i + l - (l * n)), y = (j + (l * n)))) {\r\n                                boardModel[x][y][color + \"Controls\"] = true\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Diagnol\r\n                    for (let n = -1; n <= 1; n += 2) {\r\n                        for (let l = -1; l <= 1; l += 2) {\r\n                            let x, y\r\n                            if (isInBoard(x = (i + n * l), y = (j + l))) {\r\n                                boardModel[x][y][color + \"Controls\"] = true\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                    break\r\n                default:\r\n                    console.error(\"Not valid piece type: \", type)\r\n                    break\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction promotePawn(pawnId, x) {\r\n    // Map all elements onto the same as what they were before except for the pawn with\r\n    // pawnId (change its type and id)\r\n    oPieces = oPieces.map((piece) => {\r\n        if (piece.id !== pawnId) {\r\n            return piece\r\n        } else {\r\n            let pieceId = \"queen_\" + selectedPiece.color + \"_\" + (id++).toString()\r\n            let positY = (currentTurn === \"black\" ? \"700\" : \"0\").toString()\r\n            \r\n            let pawnSetters = setters.get(pawnId)\r\n            setters.delete(pawnId)\r\n            setters.set(pieceId, pawnSetters)\r\n\r\n            selectedPiece = {\r\n                id: pieceId,\r\n                color: currentTurn,\r\n                type: \"queen\",\r\n                posX: x,\r\n                posY: positY\r\n            }\r\n            return {\r\n                id: pieceId,\r\n                img: \"piece-images/\" + currentTurn + \"-queen.png\",\r\n                posX: x,\r\n                posY: positY,\r\n                color: currentTurn,\r\n                type: \"queen\"\r\n            }\r\n        }\r\n    })\r\n    oSetPieces(oPieces)\r\n    // Need to update the boardModel?\r\n}\r\n\r\nfunction canKingMove(kingPosX, kingPosY) {\r\n    let kingCanMove = false\r\n        \r\n    // Sideways\r\n    for (let i = 0; i <= 1; i++) {\r\n        for (let j = -1; j <= 1; j += 2) {\r\n            let xp = kingPosX + j - (j * i)\r\n            let yp = kingPosY + (j * i)\r\n            \r\n            if (isInBoard(xp, yp) && !boardModel[xp][yp][currentTurn + \"Controls\"] &&\r\n                    (boardModel[xp][yp].occupier === \"empty\" || \r\n                    boardModel[xp][yp].occupier.split(\"_\")[1] === currentTurn)) {\r\n                kingCanMove = true\r\n            }\r\n        }\r\n    }\r\n\r\n    // Diagnol\r\n    for (let i = -1; i <= 1; i += 2) {\r\n        for (let j = -1; j <= 1; j += 2) {\r\n            let xp = kingPosX + i * j\r\n            let yp = kingPosY + j\r\n            if (isInBoard(xp, yp) && !boardModel[xp][yp][currentTurn + \"Controls\"] &&\r\n                    boardModel[xp][yp].occupier === \"empty\") {\r\n                kingCanMove = true\r\n            }\r\n        }\r\n    }\r\n\r\n    return kingCanMove\r\n}\r\n\r\nfunction findPiecesAttackingKing(kingPosX, kingPosY) {\r\n    let piecesAttacking = []\r\n    // Detecting rook-type attacks\r\n    for (let n = 0; n <= 1; n++) {\r\n        for (let l = -1; l <= 1; l += 2) {\r\n            let k = 1\r\n            let x, y\r\n            // When n = 0, x = i + k * l, and y = j (to go horizontal)\r\n            while (isInBoard(x = (kingPosX + k * l - (k * l * n)), y = (kingPosY + (k * l * n)))\r\n                    && boardModel[x][y].occupier === \"empty\") {\r\n                k++\r\n            }\r\n\r\n            let occupier\r\n            if (isInBoard(x, y)) {\r\n                occupier = boardModel[x][y].occupier\r\n            } else {\r\n                continue // Skip over the last bit if x, y isnt in the board\r\n            }\r\n\r\n            // x and y will now be out of the board or the coordinates of a piece\r\n            if (isInBoard(x, y) && occupier.includes(currentTurn) \r\n                    && (occupier.includes(\"rook\") || occupier.includes(\"queen\"))) {\r\n                piecesAttacking.push([x, y])\r\n            }\r\n        }\r\n    }\r\n\r\n    // Detecting bishop-type attacks\r\n    for (let n = -1; n <= 1; n += 2) {\r\n        for (let l = -1; l <= 1; l += 2) {\r\n            let k = 1\r\n            let x, y\r\n            while (isInBoard(x = (kingPosX + n * (k * l)), y = (kingPosY + k * l))\r\n                && boardModel[x][y].occupier === \"empty\") {\r\n                k++\r\n            }\r\n            let occupier\r\n            if (isInBoard(x, y)) {\r\n                occupier = boardModel[x][y].occupier\r\n            } else {\r\n                continue\r\n            }\r\n\r\n            // x and y will now be out of the board or the coordinates of a piece\r\n            if (occupier.includes(currentTurn)\r\n                    && (occupier.includes(\"bishop\") || occupier.includes(\"queen\") || \r\n                    (occupier.includes(\"pawn\") && k === 1 \r\n                    && y === (kingPosY + (currentTurn === \"white\" ? 1 : -1))))) { // currentTurn is the attacker here\r\n                piecesAttacking.push([x, y])\r\n            }\r\n        }\r\n    }\r\n\r\n    // Detecting knight-type attacks\r\n    for (let n = 0; n <= 1; n++) {\r\n        for (let l = -1; l <= 1; l += 2) {\r\n            for (let k = -1; k <= 1; k += 2) {\r\n                // Horizontal\r\n                let x, y\r\n                // kn - 2ln = n(k - 2l), 2ln - kn = n(2l - k)\r\n                let occupier\r\n                    if (isInBoard(x, y)) {\r\n                        occupier = boardModel[x][y].occupier\r\n                    } else {\r\n                        continue\r\n                    }\r\n                if (isInBoard(x = (kingPosX + l * 2 + n * (k - (2 * l))), \r\n                        y = (kingPosY + k + n * ((2 * l) - k))) \r\n                        && occupier.includes(currentTurn) && occupier.includes(\"knight\")) {\r\n                    piecesAttacking.push([x, y])\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    return piecesAttacking\r\n}\r\n\r\nfunction movePiece(x, y) {\r\n    let tempBoard = modelCopy(boardModel)\r\n\r\n    updateBoard(parseInt(selectedPiece.posX) / 100, parseInt(selectedPiece.posY) / 100,\r\n            parseInt(x) / 100, parseInt(y) / 100, selectedPiece.id)\r\n    detailBoard()\r\n    /* For testing:\r\n    let xp = parseInt(x) / 100\r\n    let yp = parseInt(y) / 100\r\n    console.log(\"Piece moving to: \", xp, yp)\r\n    console.log(\" stats for that square: \", boardModel[xp][yp])\r\n    console.log(\"King in check: \", kingInCheck())\r\n    */\r\n    console.log(getBMString())\r\n    console.log(getControlString())\r\n\r\n    if (!kingCaptures) {\r\n        let attackedKing = kingInCheck()\r\n        \r\n        // Check for includes for this one, because a player could try to move their king such that it'd\r\n        // put both kings into check, which should not be allowed \r\n        if (attackedKing.includes(currentTurn)) {\r\n            boardModel = tempBoard\r\n            detailBoard()\r\n            return false\r\n        } else if (attackedKing === opposite(currentTurn)) {\r\n            console.log(opposite(currentTurn) + \" king is in check!\")\r\n            // Note: currentTurn will be the color of the player that is ATTACKING the king\r\n            let kingColor = opposite(currentTurn)\r\n            // Index 0 of the result will have the x position, 1 will have the y\r\n            let [kingPosX, kingPosY] = findPiece(\"king_\" + kingColor)\r\n            let kingCanMove = canKingMove(kingPosX, kingPosY)\r\n\r\n            if (!kingCanMove) {\r\n                console.log(\"and it can't move!\")\r\n                // This array will have the locations of pieces that are attacking the king \r\n                // in [x, y] pairs\r\n                let piecesAttacking = findPiecesAttackingKing(kingPosX, kingPosY)\r\n                \r\n                // If there are 2 or more pieces attacking the king, then they can't be blocked or taken\r\n                // (because there are 2 to deal with) [Look up info about double checks!]\r\n                if (piecesAttacking.length >= 2) {\r\n                    endGame(currentTurn)\r\n                } else { \r\n                    console.log(\"theres only one piece attacking it\")\r\n                    let attackerX = piecesAttacking[0][0]\r\n                    let attackerY = piecesAttacking[0][1]\r\n                    // Do any defending pieces control the square that the attacker is on?\r\n                    if (!boardModel[attackerX][attackerY][kingColor + \"ControlsStrong\"]) {\r\n                        console.log(\"but nobody can take it!\")\r\n                        // If the knight can't be taken, then its mate\r\n                        if (boardModel[attackerX][attackerY].occupier.includes(\"knight\")) { \r\n                            endGame(currentTurn)\r\n                        } else {\r\n                            let dx = kingPosX - attackerX\r\n                            let dy = kingPosY - attackerY\r\n                            let larger = Math.max(Math.abs(dx), Math.abs(dy))\r\n                            let dxNorm = dx === 0 ? 0 : dx / Math.abs(dx)\r\n                            let dyNorm = dy === 0 ? 0 : dy / Math.abs(dy)\r\n\r\n                            // If the piece can't be taken, it must be blocked\r\n                            let pathBlocked = false\r\n\r\n                            // Check each square on the path to the attacking piece to the king, \r\n                            // non-inclusive\r\n                            console.log(`Checking squares from i to ${larger} now`)\r\n                            for (let i = 1; i < larger; i++) {\r\n                                console.log(\"Checking square: \", attackerX + dxNorm, attackerY + (dyNorm * i))\r\n                                if (boardModel[attackerX + dxNorm][attackerY + (dyNorm * i)]\r\n                                            [kingColor + \"ControlsStrong\"]) {\r\n                                    console.log(\"attacking piece can be blocked!\")\r\n                                    pathBlocked = true\r\n                                    break\r\n                                }\r\n                            }\r\n\r\n                            if (!pathBlocked) {\r\n                                endGame(currentTurn)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                // then do they control any of the squares on the path from the attacker to the king?\r\n            }\r\n        }\r\n    }\r\n    \r\n    let pieceSetters = setters.get(selectedPiece.id)\r\n    \r\n    pieceSetters.setPositionX(x)\r\n    pieceSetters.setPositionY(y)\r\n    \r\n    selectedPiece = null\r\n    enPassant = null\r\n    setHighlight(false)\r\n    if (flippingBoardEnabled) {\r\n        setCurrentTurn(opposite(currentTurn))\r\n    }\r\n    currentTurn = opposite(currentTurn)\r\n\r\n    return true\r\n}\r\n\r\nfunction movePawn(x, y) {\r\n    let posX = parseInt(selectedPiece.posX)\r\n    let posY = parseInt(selectedPiece.posY)\r\n    let direction = selectedPiece.color === \"black\" ? 1 : -1\r\n    let startingPos = selectedPiece.color === \"black\" ? 100 : 600\r\n    let differenceX = parseInt(x) - posX\r\n    let differenceY = (parseInt(y) - posY) * direction\r\n    \r\n    // Replace the true so that the pawn can only move on its first turn\r\n    if ((differenceX === 0) && (differenceY === 100 )) {\r\n        if (y === (selectedPiece.color === \"black\" ? \"700\" : \"0\")) {\r\n            promotePawn(selectedPiece.id, x)\r\n        }\r\n        return movePiece(x, y)\r\n    } else if ((differenceX === 0) && (differenceY === 200 && posY === startingPos)) {\r\n        if (boardModel[posX / 100][posY / 100 + direction].occupier !== \"empty\") {\r\n            return false\r\n        }\r\n        let enPassantTemp = { // Need to make this null after any other piece moves\r\n            id: selectedPiece.id,\r\n            positionX: selectedPiece.posX,\r\n            positionY: selectedPiece.color === \"black\" ? \"200\" : \"500\"\r\n        }\r\n        let result = movePiece(x, y)\r\n        enPassant = enPassantTemp\r\n        return result\r\n    } else if ((Math.abs(differenceX) === 100) && differenceY === 100 && enPassant !== null &&\r\n            enPassant.positionX === x && enPassant.positionY === y) {\r\n        oSetPieces(oPieces.filter((piece) => piece.id !== enPassant.id))\r\n        return movePiece(x, y)\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nfunction pawnCapture(x, y) {\r\n    let direction = selectedPiece.color === \"black\" ? 1 : -1\r\n    let differenceY = (parseInt(y) - parseInt(selectedPiece.posY)) * direction\r\n    let differenceX = Math.abs(parseInt(x) - parseInt(selectedPiece.posX))\r\n    \r\n    // Replace the true so that the pawn can only move on its first turn\r\n    if ((differenceX === 100) && (differenceY === 100)) {\r\n        if (y === (selectedPiece.color === \"black\" ? \"700\" : \"0\")) {\r\n            promotePawn(selectedPiece.id, x)\r\n        }\r\n        return movePiece(x, y)\r\n    }\r\n\r\n    return false\r\n}\r\n\r\n// Version of the % operator that returns 0 for 0 % 0, also \r\nfunction trplMod(a, b) {\r\n    if (a === 0 && b === 0) {\r\n        return 0\r\n    } else if (a === 0 || b === 0) {\r\n        return 1\r\n    } else {\r\n        return a % b\r\n    }\r\n}\r\n\r\n// Version of the % operator that returns 0 for 0 / 0\r\nfunction trplDivide(a, b) {\r\n    if (a === 0 && b === 0) {\r\n        return 0\r\n    } else {\r\n        return a / b\r\n    }\r\n}\r\n\r\nfunction isTripletMultiple(diffX, diffY, type) {\r\n    // Need to adjust these depending one which side\r\n    let dx = diffX / 100\r\n    let dy = diffY / 100\r\n    let movements = pieceMovements[type]\r\n    for (let i = 0; i < movements.length; i++) {\r\n        let ux = movements[i][0] // unit x\r\n        let uy = movements[i][1] * (currentTurn === \"black\" ? 1 : -1) // unit y\r\n        let xUnits = trplDivide(dx, ux)\r\n        let yUnits = trplDivide(dy, uy)\r\n        console.log(\"dx, dy:\", dx, dy, \"ux, uy:\",ux, uy)\r\n        if (trplMod(dx, ux) === 0 && trplMod(dy, uy) === 0 && xUnits >= 0 && yUnits >= 0) {\r\n            let maxU = movements[i][2]\r\n            if (Math.abs(xUnits) <= maxU && Math.abs(yUnits) <= maxU && \r\n                    (xUnits === yUnits || xUnits === 0 || yUnits === 0)) {\r\n                return [ux, uy, Math.abs((xUnits === yUnits || yUnits === 0) ? xUnits : yUnits)]\r\n            }\r\n        }\r\n    }\r\n\r\n    return [null, null, null]\r\n}\r\n\r\nfunction movePieceFilter(x, y, type) {\r\n    let posX = parseInt(selectedPiece.posX)\r\n    let posY = parseInt(selectedPiece.posY)\r\n    let differenceX = parseInt(x) - posX\r\n    let differenceY = parseInt(y) - posY\r\n    \r\n    let [unitX, unitY, units] = isTripletMultiple(differenceX, differenceY, type)\r\n    \r\n    if (unitX != null) {\r\n        for (let i = 1; i < units; i++) {\r\n            if (boardModel[(posX / 100) + i * unitX][posY / 100 + i * unitY].occupier !== \"empty\") {\r\n                return false\r\n            }\r\n        }\r\n\r\n        return movePiece(x, y)\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nfunction moveKing(x, y) {\r\n    let posX = parseInt(selectedPiece.posX)\r\n    let posY = parseInt(selectedPiece.posY)\r\n    let differenceX = parseInt(x) - posX\r\n    let differenceY = parseInt(y) - posY\r\n    let differenceXZero = differenceX === 0\r\n    let differenceYZero = differenceY === 0\r\n    let sideMove = (Math.abs(differenceX) === 100 && differenceYZero) ||\r\n            (differenceXZero && Math.abs(differenceY) === 100)\r\n    let diagnolMove = Math.abs(differenceX) === 100 && Math.abs(differenceY) === 100\r\n\r\n    let colorStats = stats.get(currentTurn)\r\n    \r\n    if (sideMove || diagnolMove) {\r\n        colorStats.kingsideCastling = false\r\n        colorStats.queensideCastling = false\r\n        return movePiece(x, y)\r\n    }\r\n\r\n    let kingsideCastle = differenceYZero && (differenceX >= 200) && colorStats.kingsideCastling\r\n    let queensideCastle = differenceYZero && (differenceX <= -200) && colorStats.queensideCastling\r\n\r\n    if (kingsideCastle) {\r\n        for (let i = 1; i < 3; i++) {\r\n            if (boardModel[posX / 100 + i][posY / 100].occupier !== \"empty\") {\r\n                return false\r\n            }\r\n        }\r\n        movePiece(\"600\", selectedPiece.posY)\r\n        let rookId = \"rook_\" + opposite(currentTurn) + \"_kingside\"\r\n        setters.get(rookId)\r\n            .setPositionX(\"500\")\r\n        let side = currentTurn === \"white\" ? 0 : 7\r\n        updateBoard(7, side, 5, side, rookId)\r\n        colorStats.kingsideCastling = false\r\n        colorStats.queensideCastling = false\r\n        return true\r\n    } else if (queensideCastle) {\r\n        for (let i = 1; i < 4; i++) {\r\n            if (boardModel[posX / 100 - i][posY / 100].occupier !== \"empty\") {\r\n                return false\r\n            }\r\n        }\r\n        movePiece(\"200\", selectedPiece.posY)\r\n        let rookId = \"rook_\" + opposite(currentTurn) + \"_queenside\"\r\n        setters.get(rookId)\r\n            .setPositionX(\"300\")\r\n        let side = currentTurn === \"black\" ? 0 : 7\r\n        updateBoard(0, side, 3, side, rookId)\r\n        colorStats.kingsideCastling = false\r\n        colorStats.queensideCastling = false\r\n        return true\r\n    }\r\n    \r\n    return false\r\n}\r\n\r\nfunction squareSelected(x, y, isCapture) {\r\n    if (selectedPiece !== null) {\r\n        if (selectedPiece.type === \"pawn\") {\r\n            return isCapture ? pawnCapture(x, y) : movePawn(x, y)\r\n        } else if (castlingEnabled && selectedPiece.type === \"king\") {\r\n            return moveKing(x, y)\r\n        } else {\r\n            return movePieceFilter(x, y, selectedPiece.type)\r\n        }\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nfunction makePieces() {\r\n    let result = []\r\n    \r\n    // Make pawns\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 2; j++) {\r\n            let pColor = (j === 0 ? \"black\" : \"white\")\r\n            let pieceId = \"pawn_\" + pColor + \"_\" + (id++).toString()\r\n            result.push({\r\n                id: pieceId,\r\n                img: \"piece-images/\" + (j === 0 ? \"black-pawn.png\" : \"white-pawn.png\"),\r\n                posX: (i * 100).toString(),\r\n                posY: (100 + 500 * j).toString(),\r\n                color: pColor,\r\n                type: \"pawn\"\r\n            })\r\n            updateBoard(-1, -1, i, 1 + 5 * j, pieceId)\r\n        }\r\n    }\r\n\r\n    // Make rooks, knights, and bishops\r\n    for (let i = 0; i < 2; i++) {\r\n        for (let j = 0; j < 2; j++) {\r\n            let pColor = (j === 0 ? \"black\" : \"white\")\r\n            let pSide = i === 0 ? \"queenside\" : \"kingside\"\r\n            let pieceId = \"rook_\" + pColor + \"_\" + pSide\r\n            result.push({\r\n                id: pieceId,\r\n                img: \"piece-images/\" + (j === 0 ? \"black-rook.png\" : \"white-rook.png\"),\r\n                posX: (0 + 700 * i).toString(),\r\n                posY: (700 * j).toString(),\r\n                color: pColor,\r\n                type: \"rook\",\r\n                side: pSide\r\n            })\r\n            updateBoard(-1, -1, 7 * i, 7 * j, pieceId)\r\n        }\r\n        for (let j = 0; j < 2; j++) {\r\n            let pColor = (j === 0 ? \"black\" : \"white\")\r\n            let pSide = i === 0 ? \"queenside\" : \"kingside\"\r\n            let pieceId = \"knight_\" + pColor + \"_\" + pSide\r\n            result.push({\r\n                id: pieceId,\r\n                img: \"piece-images/\" + (j === 0 ? \"black-knight.png\" : \"white-knight.png\"),\r\n                posX: (100 + 500 * i).toString(),\r\n                posY: (700 * j).toString(),\r\n                color: pColor,\r\n                type: \"knight\",\r\n                side: pSide\r\n            })\r\n            updateBoard(-1, -1, 1 + 5 * i, 7 * j, pieceId)\r\n        }\r\n        for (let j = 0; j < 2; j++) {\r\n            let pColor = (j === 0 ? \"black\" : \"white\")\r\n            let pSide = i === 0 ? \"queenside\" : \"kingside\"\r\n            let pieceId = \"bishop_\" + pColor + \"_\" + pSide\r\n            result.push({\r\n                id: pieceId,\r\n                img: \"piece-images/\" + (j === 0 ? \"black-bishop.png\" : \"white-bishop.png\"),\r\n                posX: (200 + 300 * i).toString(),\r\n                posY: (700 * j).toString(),\r\n                color: pColor,\r\n                type: \"bishop\",\r\n                side: pSide\r\n            })\r\n            updateBoard(-1, -1, 2 + 3 * i, 7 * j, pieceId)\r\n        }\r\n    }\r\n\r\n    // Make kings and queens\r\n    for (let j = 0; j < 2; j++) {\r\n        let pColor = (j === 0 ? \"black\" : \"white\")\r\n        let pieceId = \"queen_\" + pColor + \"_\" + (id++).toString()\r\n        result.push({\r\n            id: pieceId,\r\n            img: \"piece-images/\" + (j === 0 ? \"black-queen.png\" : \"white-queen.png\"),\r\n            posX: \"300\",\r\n            posY: (700 * j).toString(),\r\n            color: (j === 0 ? \"black\" : \"white\"),\r\n            type: \"queen\"\r\n        })\r\n        updateBoard(-1, -1, 3, 7 * j, pieceId)\r\n    }\r\n    for (let j = 0; j < 2; j++) {\r\n        let pColor = (j === 0 ? \"black\" : \"white\")\r\n        let pieceId = \"king_\" + pColor\r\n        result.push({\r\n            id: pieceId,\r\n            img: \"piece-images/\" + (j === 0 ? \"black-king.png\" : \"white-king.png\"),\r\n            posX: \"400\",\r\n            posY: (700 * j).toString(),\r\n            color: (j === 0 ? \"black\" : \"white\"),\r\n            type: \"king\"\r\n        })\r\n        updateBoard(-1, -1, 4, 7 * j, pieceId)\r\n    }\r\n    detailBoard()\r\n\r\n    return result\r\n}\r\n\r\nfunction pieceSelected(pieceId, x, y, pieceColor, pieceType, highlightPiece) {\r\n    if (gameState !== \"game running\") {\r\n        return\r\n    }\r\n    if (selectedPiece == null) {\r\n        if (pieceColor === currentTurn) {\r\n            selectedPiece = {\r\n                id: pieceId,\r\n                color: pieceColor,\r\n                type: pieceType,\r\n                posX: x,\r\n                posY: y\r\n            }\r\n            setHighlight = highlightPiece\r\n            highlightPiece(true)\r\n        }\r\n    } else if (selectedPiece.id === pieceId) {\r\n        selectedPiece = null\r\n        highlightPiece(false)\r\n    } else { // Piece trying to capture another piece (color unknown)\r\n        if (pieceColor !== selectedPiece.color) {\r\n            if (squareSelected(x, y, true)) {\r\n                oSetPieces(oPieces.filter((piece) => piece.id !== pieceId))\r\n                if (pieceType === \"king\") {\r\n                    endGame(opposite(pieceColor))\r\n                }\r\n            }\r\n        } else {\r\n            setHighlight(false)\r\n            selectedPiece = {\r\n                id: pieceId,\r\n                color: pieceColor,\r\n                type: pieceType,\r\n                posX: x,\r\n                posY: y\r\n            }\r\n\r\n            setHighlight = highlightPiece\r\n            highlightPiece(true)\r\n        }\r\n    }\r\n}\r\n\r\nlet setCurrentTurn\r\nconst Board = (props) => {\r\n    let squares = []\r\n    const [pieces, setPieces] = useState(originalPieces)\r\n    const [turnColor, setTurnColor] = useState(\"white\")\r\n    let flipBoard = turnColor === \"white\" ? 0 : 700\r\n    \r\n    setCurrentTurn = setTurnColor\r\n    oPieces = pieces\r\n    oSetPieces = setPieces\r\n    endMatch = props.matchEnded\r\n\r\n    kingCaptures = !props.checkEnabled\r\n    castlingEnabled = props.castlingEnabled\r\n    flippingBoardEnabled = props.flippingEnabled\r\n    pieceMovements = props.moveTypes\r\n\r\n    useEffect(() => {\r\n        if (props.gameDrawn) {\r\n            endGame(\"draw\")\r\n        }\r\n    })\r\n    \r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            let newSquare = {\r\n                color: (i + j) % 2 === 0 ? \"light-square\" : \"dark-square\",\r\n                sizeX: (100 / 8).toString() + \"%\",\r\n                sizeY: (100 / 8).toString() + \"%\",\r\n                posX: (Math.abs(flipBoard - j * 100)).toString(),\r\n                posY: (Math.abs(flipBoard - i * 100)).toString(),\r\n                id: \"square_\" + ((i + 1).toString()).padStart(2, \"0\") +\r\n                     ((j + 1).toString()).padStart(2, \"0\")\r\n            }\r\n\r\n            squares.push(newSquare)\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div style={{\r\n            position: \"absolute\",\r\n            height: \"100vh\",\r\n            width: \"80vw\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            backgroundColor: \"rgb(20, 20, 20)\",\r\n        }}>\r\n        <div style={boardStyle}>\r\n            {squares.map((square) => (\r\n                <Square color={square.color} width={square.sizeX} height={square.sizeY} \r\n                posX={square.posX} posY={square.posY} key={square.id} selectSquare={squareSelected}\r\n                boardFlip={flipBoard}/>\r\n            ))}\r\n            {pieces.map((piece) => (\r\n                <Piece key={piece.id} img={piece.img} sizeX=\"12.5%\" sizeY=\"12.5%\" color={piece.color}\r\n                type={piece.type} posX={piece.posX} posY={piece.posY} id={piece.id} boardFlip={flipBoard}\r\n                selectPiece={pieceSelected} addSetter={addSetter} gameState={gameState}/>\r\n            ))}\r\n            \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst boardStyle = {\r\n    width: \"100vmin\",\r\n    height: \"100vmin\",\r\n    backgroundColor: \"gray\",\r\n    position: \"relative\",\r\n}\r\n\r\nexport default Board","import \"./Square.css\"\r\nimport React from \"react\"\r\n\r\nconst Square = (props) => {\r\n    let posX = (Math.abs(props.boardFlip - parseInt(props.posX))).toString()\r\n    let posY = (Math.abs(props.boardFlip - parseInt(props.posY))).toString()\r\n    return (\r\n        <div className={props.color + \" square\"} onClick={() => props.selectSquare(posX, posY)} style={{\r\n            width: props.width.toString(),\r\n            height: props.height.toString(),\r\n            transform: \"translate(\" + props.posX + \"%,\" + props.posY + \"%)\",\r\n            position: \"absolute\",\r\n        }}></div>\r\n    )\r\n}\r\n\r\nexport default Square","import React, { useState } from \"react\"\r\n\r\nconst Piece = (props) => {\r\n    const [positionX, setPositionX] = useState(props.posX)\r\n    const [positionY, setPositionY] = useState(props.posY)\r\n    const [background, setBackground] = useState(\"rgba(27, 143, 166, 0)\")\r\n\r\n    // console.log(\"Hi this is\", props.id, \"located at\", positionX, positionY, \"or\", props.posX, props.posY)\r\n    function highlightPiece(isSelected) {\r\n        if (isSelected) {\r\n            setBackground(\"rgba(27, 143, 166, 1)\")\r\n        } else {\r\n            setBackground(\"rgba(27, 143, 166, 0)\")\r\n        }\r\n    }\r\n    props.addSetter(props.id, setPositionX, setPositionY)\r\n    let posY = (Math.abs(props.boardFlip - parseInt(positionY))).toString()\r\n    let posX = (Math.abs(props.boardFlip - parseInt(positionX))).toString()\r\n\r\n    return (\r\n        <img src={props.img} alt={props.id} \r\n            onClick={() => props.selectPiece(props.id, positionX, positionY, props.color, props.type, \r\n                highlightPiece)} \r\n            style={{\r\n                transform: \"translate(\" + posX + \"%,\" + posY + \"%)\",\r\n                //filter: \"brightness(\" + props.color === \"white\" ? \"100%)\" : \"20%)\",\r\n                position: \"absolute\",\r\n                width: props.sizeX,\r\n                height: props.sizeY,\r\n                backgroundColor: background\r\n        }} />\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Piece","import \"./btn.css\"\r\nimport \"./WinAnnouncement.css\"\r\nimport React from \"react\"\r\n\r\nfunction capitalizeFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1)\r\n}\r\n\r\nconst WinAnnouncement = (props) => {\r\n    let txt = \"\"\r\n    if (props.color === \"draw\") {\r\n        txt = \"Game drawn!\"\r\n    } else {\r\n        txt = capitalizeFirst(props.color) + \" wins!\"\r\n    }\r\n\r\n    let secondClass = props.showWin ? \"show\" : \"hide\"\r\n    return (\r\n        <div className={\"win-announcement \" + secondClass}>\r\n            <p>{txt}</p>\r\n            <button className=\"btn\" onClick={props.reset}>Restart</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default WinAnnouncement","import \"./controlbar.css\"\r\nimport React from \"react\"\r\n\r\nconst DrawBtn = (props) => {\r\n    return (\r\n        <div className=\"draw\">\r\n            Click here if both players agree to draw!\r\n        <button onClick={props.drawGame}> Draw </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DrawBtn","import React, { useState } from \"react\"\r\nimport \"./controlbar.css\"\r\n\r\nlet key = 0\r\nlet pieceMovements = {\r\n    rook: [[1, 0, 8], [-1, 0, 8], [0, 1, 8], [0, -1, 8]],\r\n    bishop: [[1, 1, 8], [-1, -1, 8], [1, -1, 8], [-1, 1, 8]],\r\n    knight: [[1, 2, 1], [-1, 2, 1], [1, -2, 1], [-1, -2, 1], \r\n    [2, 1, 1], [2, -1, 1], [-2, 1, 1], [-2, -1, 1]],\r\n    king: [[1, 0, 1], [-1, 0, 1], [0, 1, 1], [0, -1, 1], \r\n    [1, 1, 1], [-1, -1, 1], [1, -1, 1], [-1, 1, 1]],\r\n    queen: [[1, 0, 8], [-1, 0, 8], [0, 1, 8], [0, -1, 8], \r\n    [1, 1, 8], [-1, -1, 8], [1, -1, 8], [-1, 1, 8]]\r\n}\r\n\r\nfunction createInitialState(type) {\r\n    let initialState = []\r\n    let movements = pieceMovements[type]\r\n    for (let i = 0; i < movements.length; i++) {\r\n        initialState.push({\r\n            id: key++,\r\n            x: movements[i][0],\r\n            y: movements[i][1],\r\n            maxu: movements[i][2]\r\n        })\r\n    }\r\n\r\n    return initialState\r\n}\r\n\r\nconst MoveSettings = (props) => {\r\n    const [showSettings, setShowSettings] = useState(false)\r\n    const [triplets, setTriplets] = useState(createInitialState(props.type))\r\n    let secondClass = showSettings ? \"show\" : \"hide\"\r\n    return (\r\n        <div>\r\n            <button className=\"change-btn\" onClick={() => {setShowSettings(!showSettings)}}> \r\n                Change move settings for the {props.type}\r\n            </button>\r\n            <div className={\"piece-settings \" + secondClass}>\r\n                {triplets.map((triplet) => (\r\n                    <div className=\"setting-triplet\" key={triplet.id}>\r\n                        <div>Unit x:<input type=\"number\" className=\"setting-input\" \r\n                            min=\"-8\" max=\"8\" value={triplet.x} \r\n                            onChange={(e) => setTriplets(triplets.map((t) => {\r\n                                if (t.id === triplet.id) {\r\n                                    return {id: t.id, x: e.target.value, y: t.y, maxu: t.maxu}\r\n                                } else{\r\n                                    return t\r\n                                }\r\n                            }))}></input></div>\r\n                        <div>Unit y:<input type=\"number\" className=\"setting-input\"\r\n                            min=\"-8\" max=\"8\" value={triplet.y} \r\n                            onChange={(e) => setTriplets(triplets.map((t) => {\r\n                                if (t.id === triplet.id) {\r\n                                    return {id: t.id, x: t.x, y: e.target.value, maxu: t.maxu}\r\n                                } else{\r\n                                    return t\r\n                                }\r\n                            }))}></input></div>\r\n                        <div>Max units:<input type=\"number\" className=\"setting-input\"\r\n                            min=\"0\" max=\"8\" value={triplet.maxu} \r\n                            onChange={(e) => setTriplets(triplets.map((t) => {\r\n                                if (t.id === triplet.id) {\r\n                                    return {id: t.id, x: t.x, y: t.y, maxu: e.target.value}\r\n                                } else{\r\n                                    return t\r\n                                }\r\n                            }))}></input></div>\r\n                        <div onClick={() => setTriplets(triplets.filter((t) => triplet.id !== t.id))}\r\n                            className=\"delete-btn\">&#10006;</div>\r\n                    </div>\r\n                ))}\r\n                <div className=\"add-btn\" onClick={() => setTriplets([...triplets, {id: key++, x: 0, \r\n                y: 0, maxu: 0}])}>&#10010;</div>\r\n                <button onClick={() => {\r\n                    setShowSettings(false)\r\n                    props.sendTriplets(triplets, props.type)\r\n                }}>Save</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MoveSettings","import DrawBtn from \"./DrawBtn\"\r\nimport MoveSettings from \"./MoveSettings\"\r\nimport React from \"react\"\r\n\r\nconst ControlBar = (props) => {\r\n    return (\r\n        <div className=\"control-bar\">\r\n            <DrawBtn drawGame={props.drawGame}/>\r\n            <button onClick={() => {\r\n                props.changeChecks(!props.checkEnabled)\r\n            }}>{props.checkEnabled ? \"Disable\" : \"Enable\"} check/checkmate detection</button>\r\n            <button onClick={() => {props.changeCastling(!props.castlingEnabled)}}>\r\n                {props.castlingEnabled ? \"Disable\" : \"Enable\"} castling\r\n            </button>\r\n            <button onClick={() => {props.changeFlipping(!props.flippingEnabled)}}>\r\n                {props.flippingEnabled ? \"Disable\" : \"Enable\"} board flipping each turn\r\n            </button>\r\n            <MoveSettings type=\"rook\" sendTriplets={props.sendTriplets}/>\r\n            <MoveSettings type=\"knight\" sendTriplets={props.sendTriplets}/>\r\n            <MoveSettings type=\"bishop\" sendTriplets={props.sendTriplets}/>\r\n            <MoveSettings type=\"queen\" sendTriplets={props.sendTriplets}/>\r\n            <MoveSettings type=\"king\" sendTriplets={props.sendTriplets}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ControlBar","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}