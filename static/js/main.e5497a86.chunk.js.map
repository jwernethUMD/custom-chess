{"version":3,"sources":["App.js","components/Board.js","components/Square.js","components/Piece.js","components/WinAnnouncement.js","components/ControlBar.js","components/DrawBtn.js","components/MoveSettings.js","components/MoveSettingsBtn.js","reportWebVitals.js","index.js"],"names":["oRestart","pieceMovements","rook","bishop","knight","king","queen","appStyle","backgroundColor","App","_useState","useState","_useState2","Object","C_Users_jason_OneDrive_Desktop_Projects_chess_project_react_react_chess_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","showWin","setShowWin","_useState3","_useState4","color","setColor","_useState5","_useState6","gameDrawn","setGameDrawn","_useState7","_useState8","checkEnabled","setCheckEnabled","_useState9","_useState10","castlingEnabled","setCastlingEnabled","_useState11","_useState12","flippingEnabled","setFlippingEnabled","_useState13","_useState14","moveTypes","setMoveTypes","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","style","className","_components_Board__WEBPACK_IMPORTED_MODULE_2__","matchEnded","restart","_components_WinAnnouncement__WEBPACK_IMPORTED_MODULE_3__","reset","_components_ControlBar__WEBPACK_IMPORTED_MODULE_4__","drawGame","changeCastling","changeChecks","checksEnabled","changeFlipping","flipsEnabled","sendTriplets","triplets","type","newTriplets","newMoves","global","structuredClone","i","length","newTriplet","push","x","y","maxu","console","log","changeMoveTypes","oPieces","oSetPieces","endMatch","kingCaptures","flippingBoardEnabled","selectedPiece","setHighlight","error","boardModel","currentTurn","setters","Map","stats","enPassant","gameState","id","set","kingsideCastling","queensideCastling","j","occupier","whiteCaptureControls","whiteMoveControls","blackMoveControls","blackCaptureControls","whiteControlsStrong","blackControlsStrong","setCurrentTurn","defaultPieceMovements","originalPieces","makePieces","findPiece","opposite","forEach","v","pieceId","position","setPositionX","toString","setPositionY","endGame","addSetter","setPosX","setPosY","isInBoard","updateBoard","x1","y1","x2","y2","pieceControls","isKing","_triplets$_i","unitX","unitY","maxU","square","includes","detailBoard","idArr","split","direction","promotePawn","pawnId","map","piece","positY","pawnSetters","get","delete","posX","posY","img","movePiece","tempBoard","result","modelCopy","parseInt","substring","padEnd","getBMString","getControlString","attackedKing","kingsInCheck","kingInCheck","kingColor","_findPiece","_findPiece2","kingPosX","kingPosY","kingCanMove","xp","yp","canKingMove","piecesAttacking","n","l","k","findPiecesAttackingKing","attackerX","attackerY","dx","dy","larger","Math","max","abs","dxNorm","dyNorm","pathBlocked","concat","pieceSetters","trplMod","b","trplDivide","movePieceFilter","_isTripletMultiple","diffX","diffY","pMovements","movements","ux","uy","xUnits","yUnits","isTripletMultiple","_isTripletMultiple2","units","squareSelected","isCapture","differenceY","pawnCapture","startingPos","differenceX","enPassantTemp","positionX","positionY","filter","movePawn","differenceXZero","differenceYZero","sideMove","diagnolMove","colorStats","kingsideCastle","queensideCastle","rookId","side","moveKing","pColor","pSide","pieceSelected","pieceColor","pieceType","highlightPiece","boardStyle","width","height","Board","props","squares","pieces","setPieces","turnColor","setTurnColor","flipBoard","useEffect","newSquare","sizeX","sizeY","padStart","react__WEBPACK_IMPORTED_MODULE_3___default","display","justifyContent","_Square__WEBPACK_IMPORTED_MODULE_1__","key","selectSquare","boardFlip","_Piece__WEBPACK_IMPORTED_MODULE_2__","selectPiece","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_1__","Square","onClick","transform","Piece","background","setBackground","isSelected","src","alt","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","WinAnnouncement","str","txt","charAt","toUpperCase","slice","secondClass","ControlBar","showSettings","setShowSettings","showTutorial","setShowTutorial","showTutorialClass","showMoveSettings","show","newSettings","react__WEBPACK_IMPORTED_MODULE_4___default","Fragment","_DrawBtn__WEBPACK_IMPORTED_MODULE_1__","_MoveSettingsBtn__WEBPACK_IMPORTED_MODULE_3__","showing","_MoveSettings__WEBPACK_IMPORTED_MODULE_2__","DrawBtn","MoveSettings","initialState","createInitialState","C_Users_jason_OneDrive_Desktop_Projects_chess_project_react_react_chess_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","setTriplets","triplet","min","value","onChange","e","t","newX","undefined","target","newY","newMaxu","C_Users_jason_OneDrive_Desktop_Projects_chess_project_react_react_chess_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","MoveSettingsBtn","reportWebVitals","onPerfEntry","Function","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","react_default","StrictMode"],"mappings":"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","file":"static/js/main.e5497a86.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport React from \"react\";\nimport Board from \"./components/Board\";\nimport WinAnnouncement from \"./components/WinAnnouncement\"\nimport ControlBar from \"./components/ControlBar\"\n\nlet oRestart\n\n// Default piece movements\nlet pieceMovements = {\n  rook: [[1, 0, 8], [-1, 0, 8], [0, 1, 8], [0, -1, 8]],\n  bishop: [[1, 1, 8], [-1, -1, 8], [1, -1, 8], [-1, 1, 8]],\n  knight: [[1, 2, 1], [-1, 2, 1], [1, -2, 1], [-1, -2, 1], \n  [2, 1, 1], [2, -1, 1], [-2, 1, 1], [-2, -1, 1]],\n  king: [[1, 0, 1], [-1, 0, 1], [0, 1, 1], [0, -1, 1], \n  [1, 1, 1], [-1, -1, 1], [1, -1, 1], [-1, 1, 1]],\n  queen: [[1, 0, 8], [-1, 0, 8], [0, 1, 8], [0, -1, 8], \n  [1, 1, 8], [-1, -1, 8], [1, -1, 8], [-1, 1, 8]]\n}\n\nfunction App() {\n  const [showWin, setShowWin] = useState(false)\n  const [color, setColor] = useState(\"None\")\n  const [gameDrawn, setGameDrawn] = useState(false)\n  const [checkEnabled, setCheckEnabled] = useState(true)\n  const [castlingEnabled, setCastlingEnabled] = useState(true)\n  const [flippingEnabled, setFlippingEnabled] = useState(false)\n  const [moveTypes, setMoveTypes] = useState(pieceMovements)\n  \n  function matchEnded(color, restart) {\n    setColor(color)\n    setShowWin(true)\n    oRestart = restart\n  }\n\n  function reset() {\n    oRestart()\n    setShowWin(false)\n    setGameDrawn(false)\n  }\n\n  function drawGame() {\n    setGameDrawn(true)\n  }\n\n  function changeCastling(castlingEnabled) {\n    setCastlingEnabled(castlingEnabled)\n  }\n\n  function changeChecks(checksEnabled) {\n    setCheckEnabled(checksEnabled)\n  }\n\n  function changeFlipping(flipsEnabled) {\n    setFlippingEnabled(flipsEnabled)\n  }\n\n  function changeMoveTypes(newTriplets, type) {\n    let newMoves = global.structuredClone(moveTypes)\n    newMoves[type] = []\n    for (let i = 0; i < newTriplets.length; i++) {\n      let newTriplet = newTriplets[i]\n      newMoves[type].push([newTriplet.x, newTriplet.y, newTriplet.maxu])\n    }\n    console.log(\"Changing moves types for the\", type)\n    return newMoves\n  }\n\n  function tripletsReceived(triplets, type) {\n    setMoveTypes(changeMoveTypes(triplets, type))\n  }\n\n  return (\n    <div style={appStyle} className=\"App\">\n      <Board matchEnded={matchEnded} gameDrawn={gameDrawn} checkEnabled={checkEnabled}\n      castlingEnabled={castlingEnabled} flippingEnabled={flippingEnabled} moveTypes={moveTypes}/>\n      <WinAnnouncement showWin={showWin} color={color} reset={reset}/>\n      <ControlBar drawGame={drawGame} changeCastling={changeCastling} changeChecks={changeChecks}\n      changeFlipping={changeFlipping} checkEnabled={checkEnabled} castlingEnabled={castlingEnabled}\n      flippingEnabled={flippingEnabled} sendTriplets={tripletsReceived}/>\n    </div>\n  );\n}\n\nconst appStyle = {\n  backgroundColor: \"rgb(20, 20, 20)\",\n}\n\nexport default App;\n","import Square from \"./Square\"\r\nimport Piece from \"./Piece\"\r\nimport React, { useEffect, useState } from \"react\"\r\n\r\n// Making kingCaptures true disables check/checkmate detection! Capturing the king is required to\r\n// win!\r\nlet kingCaptures = false\r\nlet castlingEnabled = true\r\nlet flippingBoardEnabled = false\r\n// Create a function that changes the selectedPiece, and pass it to the child, so that when the child\r\n// is clicked on, the selectedPiece updates wooo!! wow\r\nlet selectedPiece = null // = id of the piece(its key in the map)\r\nlet setHighlight = () => console.error(\"No piece selected\")\r\nlet boardModel = []\r\nlet currentTurn = \"white\"\r\nlet setters = new Map()\r\nlet stats = new Map()\r\n// If a pawn moves two forward, then information about that pawn is stored in this variable for the\r\n// next turn in case it can be en passanted\r\nlet enPassant = null\r\nlet gameState = \"game running\"\r\nlet id = 0\r\n// o stands for outer\r\nlet oPieces, oSetPieces\r\nlet endMatch\r\n// Keep track of basic stats for each color\r\nstats.set(\"white\", {\r\n    kingsideCastling: castlingEnabled,\r\n    queensideCastling: castlingEnabled,\r\n})\r\nstats.set(\"black\", {\r\n    kingsideCastling: castlingEnabled,\r\n    queensideCastling: castlingEnabled,\r\n})\r\n\r\n// make whiteCanMove, whiteCanCapture, and same for black\r\nfor (let i = 0; i < 8; i++) {\r\n    boardModel[i] = []\r\n    for (let j = 0; j < 8; j++) {\r\n        // The first part of this pair indicates the piece thats on the square, whereas the second\r\n        // indicates which color controls that square\r\n        boardModel[i][j] = {\r\n            occupier: \"empty\",\r\n            whiteCaptureControls: false,\r\n            whiteMoveControls: false,\r\n            blackMoveControls: false,\r\n            blackCaptureControls: false,\r\n            whiteControlsStrong: false, // whiteControlsStrong means a white piece that isn't the king controls the square\r\n            blackControlsStrong: false\r\n        }\r\n    }\r\n}\r\n\r\n// Piece movement patterns are made up of one or more triplets that contain three main values\r\n// in each triplet array: x; this determines the unit x value, y; this determines the unit y value,\r\n// max units; this determines how many unit xs and unit ys the piece can go at most. For example,\r\n// for the triplet in the rook [0, 1, 8], this triplet says that the rook can go in the positive y\r\n// direction one at a time, cannot go into the x direction in that same move, and can do that up to\r\n// 8 times in one move. So, it says the rook can move in the positive y direction.\r\nlet defaultPieceMovements = {\r\n    rook: [[1, 0, 8], [-1, 0, 8], [0, 1, 8], [0, -1, 8]],\r\n    bishop: [[1, 1, 8], [-1, -1, 8], [1, -1, 8], [-1, 1, 8]],\r\n    knight: [[1, 2, 1], [-1, 2, 1], [1, -2, 1], [-1, -2, 1], \r\n    [2, 1, 1], [2, -1, 1], [-2, 1, 1], [-2, -1, 1]],\r\n    king: [[1, 0, 1], [-1, 0, 1], [0, 1, 1], [0, -1, 1], \r\n    [1, 1, 1], [-1, -1, 1], [1, -1, 1], [-1, 1, 1]],\r\n    queen: [[1, 0, 8], [-1, 0, 8], [0, 1, 8], [0, -1, 8], \r\n    [1, 1, 8], [-1, -1, 8], [1, -1, 8], [-1, 1, 8]]\r\n}\r\n\r\nlet pieceMovements = defaultPieceMovements\r\n\r\n// Only want to make all the pieces once for each game\r\nlet originalPieces = makePieces()\r\n\r\n// Returns a string that represents the board model (for testing)\r\nfunction getBMString() {\r\n    let result = \"\"\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            let thing = boardModel[j][i].occupier.substring(0, 5)\r\n            result += thing.padEnd(6, \" \")\r\n        }\r\n        result += \"\\n\"\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nfunction getControlString() {\r\n    let result = \"\"\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            result += \"(\"\r\n            if (boardModel[j][i].whiteCaptureControls) {\r\n                result += \"W\"\r\n            } else {\r\n                result += \"-\"\r\n            }\r\n            result += \", \"\r\n            if (boardModel[j][i].blackCaptureControls) {\r\n                result += \"B\"\r\n            } else {\r\n                result += \"-\"\r\n            }\r\n            result += \"),\"\r\n        }\r\n        result += \"\\n\"\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nfunction modelCopy() {\r\n    let result = []\r\n    for (let i = 0; i <= 7; i++) {\r\n        result[i] = []\r\n        for (let j = 0; j <= 7; j++) {\r\n            result[i][j] = global.structuredClone(boardModel[i][j])\r\n        }\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nfunction findPiece(id) {\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            if (boardModel[i][j].occupier === id) {\r\n                return [i, j]\r\n            }\r\n        }\r\n    }\r\n\r\n    return null\r\n}\r\n\r\n// Returns the color of the kings that are in check or returns \"\"\r\nfunction kingInCheck() {\r\n    let kingsInCheck = \"\"\r\n    for (let i = 0; i <= 7; i++) {\r\n        for (let j = 0; j <= 7; j++) {\r\n            let idArr = boardModel[i][j].occupier.split(\"_\")\r\n            let type = idArr[0]\r\n            let color = idArr[1]\r\n            if (type === \"king\") {\r\n                if (boardModel[i][j][opposite(color) + \"CaptureControls\"]) {\r\n                    kingsInCheck += color\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    return kingsInCheck\r\n}\r\n\r\nfunction opposite(color) {\r\n    return color === \"white\" ? \"black\" : \"white\"\r\n}\r\n\r\nfunction restart() {\r\n    id = 0\r\n    stats.set(\"white\", {\r\n        kingsideCastling: castlingEnabled,\r\n        queensideCastling: castlingEnabled,\r\n    })\r\n    stats.set(\"black\", {\r\n        kingsideCastling: castlingEnabled,\r\n        queensideCastling: castlingEnabled,\r\n    })\r\n    for (let i = 0; i < 8; i++) {\r\n        boardModel[i] = []\r\n        for (let j = 0; j < 8; j++) {\r\n            // The first part of this pair indicates the piece thats on the square, whereas the second\r\n            // indicates which color controls that square\r\n            boardModel[i][j] = {\r\n                occupier: \"empty\",\r\n                whiteCaptureControls: false,\r\n                whiteMoveControls: false,\r\n                blackMoveControls: false,\r\n                blackCaptureControls: false,\r\n                whiteControlsStrong: false, // whiteControlsStrong means a white piece that isn't the king controls the square\r\n                blackControlsStrong: false\r\n            }\r\n        }\r\n    }\r\n    originalPieces = makePieces()\r\n    oPieces = originalPieces\r\n    oSetPieces(originalPieces)\r\n    setters.forEach((v, pieceId) => {\r\n        let position = findPiece(pieceId)\r\n        if (position != null) {\r\n            v.setPositionX((position[0] * 100).toString())\r\n            v.setPositionY((position[1] * 100).toString())\r\n        }\r\n    })\r\n    if (flippingBoardEnabled) {\r\n        setCurrentTurn(\"white\")\r\n    }\r\n    currentTurn = \"white\"\r\n    gameState = \"game running\"\r\n}\r\n\r\nfunction endGame(color) {\r\n    gameState = \"game ended\"\r\n    endMatch(color, restart)\r\n}\r\n\r\nfunction addSetter(pieceId, setPosX, setPosY) {\r\n    setters.set(pieceId, {setPositionX: setPosX, setPositionY: setPosY})\r\n}\r\n\r\nfunction isInBoard(x, y) {\r\n    return x >= 0 && x <= 7 && y >= 0 && y <= 7\r\n}\r\n\r\n// Adds/moves a piece on the board\r\nfunction updateBoard(x1, y1, x2, y2, id) {\r\n    if (x1 >= 0 && y1 >= 0) {\r\n        boardModel[x1][y1].occupier = \"empty\"\r\n    }\r\n\r\n    boardModel[x2][y2].occupier = id\r\n}\r\n\r\n// x,y is the location of the piece, color is its color\r\nfunction pieceControls(x, y, color, type) {\r\n    let triplets = pieceMovements[type]\r\n    let isKing = type === \"king\"\r\n\r\n    for (let i = 0; i < triplets.length; i++) {\r\n        let [unitX, unitY, maxU] = triplets[i]\r\n\r\n        for (let j = 1; j <= maxU; j++) {\r\n            if (!isInBoard(x + j * unitX, y + j * unitY)) {\r\n                break\r\n            } else {\r\n                // Mark the square as being controlled\r\n                let square = boardModel[x + j * unitX][y + j * unitY]\r\n                let occupier = square.occupier\r\n                square[color + \"MoveControls\"] = !isKing\r\n                square[color + \"CaptureControls\"] = true\r\n                square[color + \"ControlsStrong\"] = !isKing\r\n\r\n                if (occupier !== \"empty\" && \r\n                !(occupier.includes(\"king_\") && occupier.includes(opposite(color)))) {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction detailBoard() {\r\n    // Reset the controllers of the board\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            boardModel[i][j].whiteCaptureControls = false\r\n            boardModel[i][j].whiteMoveControls = false\r\n            boardModel[i][j].whiteControlsStrong = false\r\n            boardModel[i][j].blackCaptureControls = false\r\n            boardModel[i][j].blackMoveControls = false\r\n            boardModel[i][j].blackControlsStrong = false\r\n        }\r\n    }\r\n\r\n    // Repopulate\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            let idArr = boardModel[i][j].occupier.split(\"_\")\r\n            let type = idArr[0]\r\n            let color = idArr[1]\r\n            if (type === \"pawn\") {\r\n                let direction = color === \"black\" ? 1 : -1\r\n                if (isInBoard(i + 1, j + direction)) {\r\n                    let square = boardModel[i + 1][j + direction]\r\n                    square[color + \"CaptureControls\"] = true\r\n                    square[color + \"ControlsStrong\"] = true\r\n                }\r\n                if (isInBoard(i - 1, j + direction)) {\r\n                    let square = boardModel[i - 1][j + direction]\r\n                    square[color + \"CaptureControls\"] = true\r\n                    square[color + \"ControlsStrong\"] = true\r\n                }\r\n            } else if (type !== \"empty\") {\r\n                pieceControls(i, j, color, type)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction promotePawn(pawnId, x) {\r\n    // Map all elements onto the same as what they were before except for the pawn with\r\n    // pawnId (change its type and id)\r\n    oPieces = oPieces.map((piece) => {\r\n        if (piece.id !== pawnId) {\r\n            return piece\r\n        } else {\r\n            let pieceId = \"queen_\" + selectedPiece.color + \"_\" + (id++).toString()\r\n            let positY = (currentTurn === \"black\" ? \"700\" : \"0\").toString()\r\n            \r\n            let pawnSetters = setters.get(pawnId)\r\n            setters.delete(pawnId)\r\n            setters.set(pieceId, pawnSetters)\r\n\r\n            selectedPiece = {\r\n                id: pieceId,\r\n                color: currentTurn,\r\n                type: \"queen\",\r\n                posX: x,\r\n                posY: positY\r\n            }\r\n            return {\r\n                id: pieceId,\r\n                img: \"piece-images/\" + currentTurn + \"-queen.png\",\r\n                posX: x,\r\n                posY: positY,\r\n                color: currentTurn,\r\n                type: \"queen\"\r\n            }\r\n        }\r\n    })\r\n    oSetPieces(oPieces)\r\n    // Need to update the boardModel?\r\n}\r\n\r\nfunction canKingMove(kingPosX, kingPosY) {\r\n    let kingCanMove = false\r\n        \r\n    // Sideways\r\n    for (let i = 0; i <= 1; i++) {\r\n        for (let j = -1; j <= 1; j += 2) {\r\n            let xp = kingPosX + j - (j * i)\r\n            let yp = kingPosY + (j * i)\r\n            \r\n            if (isInBoard(xp, yp) && !boardModel[xp][yp][currentTurn + \"CaptureControls\"] &&\r\n                    (boardModel[xp][yp].occupier === \"empty\" || \r\n                    boardModel[xp][yp].occupier.split(\"_\")[1] === currentTurn)) {\r\n                kingCanMove = true\r\n            }\r\n        }\r\n    }\r\n\r\n    // Diagnol\r\n    for (let i = -1; i <= 1; i += 2) {\r\n        for (let j = -1; j <= 1; j += 2) {\r\n            let xp = kingPosX + i * j\r\n            let yp = kingPosY + j\r\n            if (isInBoard(xp, yp) && !boardModel[xp][yp][currentTurn + \"CaptureControls\"] &&\r\n                    boardModel[xp][yp].occupier === \"empty\") {\r\n                kingCanMove = true\r\n            }\r\n        }\r\n    }\r\n\r\n    return kingCanMove\r\n}\r\n\r\nfunction findPiecesAttackingKing(kingPosX, kingPosY) {\r\n    let piecesAttacking = []\r\n    // Detecting rook-type attacks\r\n    for (let n = 0; n <= 1; n++) {\r\n        for (let l = -1; l <= 1; l += 2) {\r\n            let k = 1\r\n            let x, y\r\n            // When n = 0, x = i + k * l, and y = j (to go horizontal)\r\n            while (isInBoard(x = (kingPosX + k * l - (k * l * n)), y = (kingPosY + (k * l * n)))\r\n                    && boardModel[x][y].occupier === \"empty\") {\r\n                k++\r\n            }\r\n\r\n            let occupier\r\n            if (isInBoard(x, y)) {\r\n                occupier = boardModel[x][y].occupier\r\n            } else {\r\n                continue // Skip over the last bit if x, y isnt in the board\r\n            }\r\n\r\n            // x and y will now be out of the board or the coordinates of a piece\r\n            if (isInBoard(x, y) && occupier.includes(currentTurn) \r\n                    && (occupier.includes(\"rook\") || occupier.includes(\"queen\"))) {\r\n                piecesAttacking.push([x, y])\r\n            }\r\n        }\r\n    }\r\n\r\n    // Detecting bishop-type attacks\r\n    for (let n = -1; n <= 1; n += 2) {\r\n        for (let l = -1; l <= 1; l += 2) {\r\n            let k = 1\r\n            let x, y\r\n            while (isInBoard(x = (kingPosX + n * (k * l)), y = (kingPosY + k * l))\r\n                && boardModel[x][y].occupier === \"empty\") {\r\n                k++\r\n            }\r\n            let occupier\r\n            if (isInBoard(x, y)) {\r\n                occupier = boardModel[x][y].occupier\r\n            } else {\r\n                continue\r\n            }\r\n\r\n            // x and y will now be out of the board or the coordinates of a piece\r\n            if (occupier.includes(currentTurn)\r\n                    && (occupier.includes(\"bishop\") || occupier.includes(\"queen\") || \r\n                    (occupier.includes(\"pawn\") && k === 1 \r\n                    && y === (kingPosY + (currentTurn === \"white\" ? 1 : -1))))) { // currentTurn is the attacker here\r\n                piecesAttacking.push([x, y])\r\n            }\r\n        }\r\n    }\r\n\r\n    // Detecting knight-type attacks\r\n    for (let n = 0; n <= 1; n++) {\r\n        for (let l = -1; l <= 1; l += 2) {\r\n            for (let k = -1; k <= 1; k += 2) {\r\n                // Horizontal\r\n                let x, y\r\n                // kn - 2ln = n(k - 2l), 2ln - kn = n(2l - k)\r\n                let occupier\r\n                    if (isInBoard(x, y)) {\r\n                        occupier = boardModel[x][y].occupier\r\n                    } else {\r\n                        continue\r\n                    }\r\n                if (isInBoard(x = (kingPosX + l * 2 + n * (k - (2 * l))), \r\n                        y = (kingPosY + k + n * ((2 * l) - k))) \r\n                        && occupier.includes(currentTurn) && occupier.includes(\"knight\")) {\r\n                    piecesAttacking.push([x, y])\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    return piecesAttacking\r\n}\r\n\r\nfunction movePiece(x, y) {\r\n    let tempBoard = modelCopy(boardModel)\r\n\r\n    updateBoard(parseInt(selectedPiece.posX) / 100, parseInt(selectedPiece.posY) / 100,\r\n            parseInt(x) / 100, parseInt(y) / 100, selectedPiece.id)\r\n    detailBoard()\r\n    /* For testing:\r\n    let xp = parseInt(x) / 100\r\n    let yp = parseInt(y) / 100\r\n    console.log(\"Piece moving to: \", xp, yp)\r\n    console.log(\" stats for that square: \", boardModel[xp][yp])\r\n    console.log(\"King in check: \", kingInCheck())\r\n    */\r\n    console.log(getBMString())\r\n    console.log(getControlString())\r\n\r\n    if (!kingCaptures) {\r\n        let attackedKing = kingInCheck()\r\n        // Check for includes for this one, because a player could try to move their king such that it'd\r\n        // put both kings into check, which should not be allowed \r\n        if (attackedKing.includes(currentTurn)) {\r\n            boardModel = tempBoard\r\n            detailBoard()\r\n            return false\r\n        } else if (attackedKing === opposite(currentTurn)) {\r\n            console.log(opposite(currentTurn) + \" king is in check!\")\r\n            // Note: currentTurn will be the color of the player that is ATTACKING the king\r\n            let kingColor = opposite(currentTurn)\r\n            // Index 0 of the result will have the x position, 1 will have the y\r\n            let [kingPosX, kingPosY] = findPiece(\"king_\" + kingColor)\r\n            let kingCanMove = canKingMove(kingPosX, kingPosY)\r\n\r\n            if (!kingCanMove) {\r\n                console.log(\"and it can't move!\")\r\n                // This array will have the locations of pieces that are attacking the king \r\n                // in [x, y] pairs\r\n                let piecesAttacking = findPiecesAttackingKing(kingPosX, kingPosY)\r\n                \r\n                // If there are 2 or more pieces attacking the king, then they can't be blocked or taken\r\n                // (because there are 2 to deal with) [Look up info about double checks!]\r\n                if (piecesAttacking.length >= 2) {\r\n                    endGame(currentTurn)\r\n                } else { \r\n                    console.log(\"theres only one piece attacking it\")\r\n                    let attackerX = piecesAttacking[0][0]\r\n                    let attackerY = piecesAttacking[0][1]\r\n                    // Do any defending pieces control the square that the attacker is on?\r\n                    if (!boardModel[attackerX][attackerY][kingColor + \"ControlsStrong\"]) {\r\n                        console.log(\"but nobody can take it!\")\r\n                        // If the knight can't be taken, then its mate\r\n                        if (boardModel[attackerX][attackerY].occupier.includes(\"knight\")) { \r\n                            endGame(currentTurn)\r\n                        } else {\r\n                            let dx = kingPosX - attackerX\r\n                            let dy = kingPosY - attackerY\r\n                            let larger = Math.max(Math.abs(dx), Math.abs(dy))\r\n                            let dxNorm = dx === 0 ? 0 : dx / Math.abs(dx)\r\n                            let dyNorm = dy === 0 ? 0 : dy / Math.abs(dy)\r\n\r\n                            // If the piece can't be taken, it must be blocked\r\n                            let pathBlocked = false\r\n\r\n                            // Check each square on the path to the attacking piece to the king, \r\n                            // non-inclusive\r\n                            console.log(`Checking squares from i to ${larger} now`)\r\n                            for (let i = 1; i < larger; i++) {\r\n                                console.log(\"Checking square: \", attackerX + dxNorm, attackerY + (dyNorm * i))\r\n\r\n                                // Note: king shouldn't moveControl even squares that it can move to\r\n                                if (boardModel[attackerX + (dxNorm * i)][attackerY + (dyNorm * i)][kingColor + \"MoveControls\"]) {\r\n                                    console.log(\"attacking piece can be blocked on\", attackerX + dxNorm, attackerY + (dyNorm * i))\r\n                                    pathBlocked = true\r\n                                    break\r\n                                }\r\n                            }\r\n\r\n                            if (!pathBlocked) {\r\n                                endGame(currentTurn)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                // then do they control any of the squares on the path from the attacker to the king?\r\n            }\r\n        }\r\n    }\r\n    \r\n    let pieceSetters = setters.get(selectedPiece.id)\r\n    \r\n    pieceSetters.setPositionX(x)\r\n    pieceSetters.setPositionY(y)\r\n    \r\n    selectedPiece = null\r\n    enPassant = null\r\n    setHighlight(false)\r\n    if (flippingBoardEnabled) {\r\n        setCurrentTurn(opposite(currentTurn))\r\n    }\r\n    currentTurn = opposite(currentTurn)\r\n\r\n    return true\r\n}\r\n\r\nfunction movePawn(x, y) {\r\n    let posX = parseInt(selectedPiece.posX)\r\n    let posY = parseInt(selectedPiece.posY)\r\n    let direction = selectedPiece.color === \"black\" ? 1 : -1\r\n    let startingPos = selectedPiece.color === \"black\" ? 100 : 600\r\n    let differenceX = parseInt(x) - posX\r\n    let differenceY = (parseInt(y) - posY) * direction\r\n    \r\n    // Replace the true so that the pawn can only move on its first turn\r\n    if ((differenceX === 0) && (differenceY === 100 )) {\r\n        if (y === (selectedPiece.color === \"black\" ? \"700\" : \"0\")) {\r\n            promotePawn(selectedPiece.id, x)\r\n        }\r\n        return movePiece(x, y)\r\n    } else if ((differenceX === 0) && (differenceY === 200 && posY === startingPos)) {\r\n        if (boardModel[posX / 100][posY / 100 + direction].occupier !== \"empty\") {\r\n            return false\r\n        }\r\n        let enPassantTemp = { // Need to make this null after any other piece moves\r\n            id: selectedPiece.id,\r\n            positionX: selectedPiece.posX,\r\n            positionY: selectedPiece.color === \"black\" ? \"200\" : \"500\"\r\n        }\r\n        let result = movePiece(x, y)\r\n        enPassant = enPassantTemp\r\n        return result\r\n    } else if ((Math.abs(differenceX) === 100) && differenceY === 100 && enPassant !== null &&\r\n            enPassant.positionX === x && enPassant.positionY === y) {\r\n        oSetPieces(oPieces.filter((piece) => piece.id !== enPassant.id))\r\n        return movePiece(x, y)\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nfunction pawnCapture(x, y) {\r\n    let direction = selectedPiece.color === \"black\" ? 1 : -1\r\n    let differenceY = (parseInt(y) - parseInt(selectedPiece.posY)) * direction\r\n    let differenceX = Math.abs(parseInt(x) - parseInt(selectedPiece.posX))\r\n    \r\n    // Replace the true so that the pawn can only move on its first turn\r\n    if ((differenceX === 100) && (differenceY === 100)) {\r\n        if (y === (selectedPiece.color === \"black\" ? \"700\" : \"0\")) {\r\n            promotePawn(selectedPiece.id, x)\r\n        }\r\n        return movePiece(x, y)\r\n    }\r\n\r\n    return false\r\n}\r\n\r\n// Version of the % operator that returns 0 for 0 % 0, also \r\nfunction trplMod(a, b) {\r\n    if (a === 0 && b === 0) {\r\n        return 0\r\n    } else if (a === 0 || b === 0) { // this is possibly bugging\r\n        return 1\r\n    } else {\r\n        return a % b\r\n    }\r\n}\r\n\r\n// Version of the % operator that returns 0 for 0 / 0\r\nfunction trplDivide(a, b) {\r\n    if (a === 0 && b === 0) {\r\n        return 0\r\n    } else {\r\n        return a / b\r\n    }\r\n}\r\n\r\nfunction isTripletMultiple(diffX, diffY, type) {\r\n    // Need to adjust these depending one which side\r\n    let dx = diffX / 100\r\n    let dy = diffY / 100\r\n    let pMovements = defaultPieceMovements\r\n    if (!castlingEnabled && kingCaptures) {\r\n        pMovements = pieceMovements\r\n    }\r\n    let movements = pMovements[type]\r\n    for (let i = 0; i < movements.length; i++) {\r\n        let ux = movements[i][0] // unit x\r\n        let uy = movements[i][1] * (currentTurn === \"black\" ? 1 : -1) // unit y\r\n        let xUnits = trplDivide(dx, ux)\r\n        let yUnits = trplDivide(dy, uy)\r\n        console.log(\"dx, dy:\", dx, dy, \"ux, uy:\",ux, uy)\r\n        if (trplMod(dx, ux) === 0 && trplMod(dy, uy) === 0 && xUnits >= 0 && yUnits >= 0) {\r\n            let maxU = movements[i][2]\r\n            if (Math.abs(xUnits) <= maxU && Math.abs(yUnits) <= maxU && \r\n                    (xUnits === yUnits || xUnits === 0 || yUnits === 0)) {\r\n                console.log(\"Proper move idea\")\r\n                return [ux, uy, Math.abs((xUnits === yUnits || yUnits === 0) ? xUnits : yUnits)]\r\n            }\r\n        }\r\n    }\r\n\r\n    return [null, null, null]\r\n}\r\n\r\nfunction movePieceFilter(x, y, type) {\r\n    let posX = parseInt(selectedPiece.posX)\r\n    let posY = parseInt(selectedPiece.posY)\r\n    let differenceX = parseInt(x) - posX\r\n    let differenceY = parseInt(y) - posY\r\n    \r\n    let [unitX, unitY, units] = isTripletMultiple(differenceX, differenceY, type)\r\n    \r\n    if (unitX != null) {\r\n        for (let i = 1; i < units; i++) {\r\n            if (boardModel[(posX / 100) + i * unitX][posY / 100 + i * unitY].occupier !== \"empty\") {\r\n                console.log(`${selectedPiece.type} blocked by piece at ${(posX / 100) + i * unitX}, ${(posY / 100 + i * unitY)}`)\r\n                return false\r\n            }\r\n        }\r\n\r\n        return movePiece(x, y)\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nfunction moveKing(x, y) {\r\n    let posX = parseInt(selectedPiece.posX)\r\n    let posY = parseInt(selectedPiece.posY)\r\n    let differenceX = parseInt(x) - posX\r\n    let differenceY = parseInt(y) - posY\r\n    let differenceXZero = differenceX === 0\r\n    let differenceYZero = differenceY === 0\r\n    let sideMove = (Math.abs(differenceX) === 100 && differenceYZero) ||\r\n            (differenceXZero && Math.abs(differenceY) === 100)\r\n    let diagnolMove = Math.abs(differenceX) === 100 && Math.abs(differenceY) === 100\r\n\r\n    let colorStats = stats.get(currentTurn)\r\n    \r\n    if (sideMove || diagnolMove) {\r\n        colorStats.kingsideCastling = false\r\n        colorStats.queensideCastling = false\r\n        return movePiece(x, y)\r\n    }\r\n\r\n    let kingsideCastle = differenceYZero && (differenceX >= 200) && colorStats.kingsideCastling\r\n    let queensideCastle = differenceYZero && (differenceX <= -200) && colorStats.queensideCastling\r\n\r\n    if (kingsideCastle) {\r\n        for (let i = 1; i < 3; i++) {\r\n            if (boardModel[posX / 100 + i][posY / 100].occupier !== \"empty\") {\r\n                return false\r\n            }\r\n        }\r\n        movePiece(\"600\", selectedPiece.posY)\r\n        let rookId = \"rook_\" + opposite(currentTurn) + \"_kingside\"\r\n        setters.get(rookId)\r\n            .setPositionX(\"500\")\r\n        let side = currentTurn === \"white\" ? 0 : 7\r\n        updateBoard(7, side, 5, side, rookId)\r\n        colorStats.kingsideCastling = false\r\n        colorStats.queensideCastling = false\r\n        return true\r\n    } else if (queensideCastle) {\r\n        for (let i = 1; i < 4; i++) {\r\n            if (boardModel[posX / 100 - i][posY / 100].occupier !== \"empty\") {\r\n                return false\r\n            }\r\n        }\r\n        movePiece(\"200\", selectedPiece.posY)\r\n        let rookId = \"rook_\" + opposite(currentTurn) + \"_queenside\"\r\n        setters.get(rookId)\r\n            .setPositionX(\"300\")\r\n        let side = currentTurn === \"black\" ? 0 : 7\r\n        updateBoard(0, side, 3, side, rookId)\r\n        colorStats.kingsideCastling = false\r\n        colorStats.queensideCastling = false\r\n        return true\r\n    }\r\n    \r\n    return false\r\n}\r\n\r\nfunction squareSelected(x, y, isCapture) {\r\n    if (selectedPiece !== null) {\r\n        if (selectedPiece.type === \"pawn\") {\r\n            return isCapture ? pawnCapture(x, y) : movePawn(x, y)\r\n        } else if (castlingEnabled && selectedPiece.type === \"king\") {\r\n            return moveKing(x, y)\r\n        } else {\r\n            return movePieceFilter(x, y, selectedPiece.type)\r\n        }\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nfunction makePieces() {\r\n    let result = []\r\n    \r\n    // Make pawns\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 2; j++) {\r\n            let pColor = (j === 0 ? \"black\" : \"white\")\r\n            let pieceId = \"pawn_\" + pColor + \"_\" + (id++).toString()\r\n            result.push({\r\n                id: pieceId,\r\n                img: \"piece-images/\" + (j === 0 ? \"black-pawn.png\" : \"white-pawn.png\"),\r\n                posX: (i * 100).toString(),\r\n                posY: (100 + 500 * j).toString(),\r\n                color: pColor,\r\n                type: \"pawn\"\r\n            })\r\n            updateBoard(-1, -1, i, 1 + 5 * j, pieceId)\r\n        }\r\n    }\r\n\r\n    // Make rooks, knights, and bishops\r\n    for (let i = 0; i < 2; i++) {\r\n        for (let j = 0; j < 2; j++) {\r\n            let pColor = (j === 0 ? \"black\" : \"white\")\r\n            let pSide = i === 0 ? \"queenside\" : \"kingside\"\r\n            let pieceId = \"rook_\" + pColor + \"_\" + pSide\r\n            result.push({\r\n                id: pieceId,\r\n                img: \"piece-images/\" + (j === 0 ? \"black-rook.png\" : \"white-rook.png\"),\r\n                posX: (0 + 700 * i).toString(),\r\n                posY: (700 * j).toString(),\r\n                color: pColor,\r\n                type: \"rook\",\r\n                side: pSide\r\n            })\r\n            updateBoard(-1, -1, 7 * i, 7 * j, pieceId)\r\n        }\r\n        for (let j = 0; j < 2; j++) {\r\n            let pColor = (j === 0 ? \"black\" : \"white\")\r\n            let pSide = i === 0 ? \"queenside\" : \"kingside\"\r\n            let pieceId = \"knight_\" + pColor + \"_\" + pSide\r\n            result.push({\r\n                id: pieceId,\r\n                img: \"piece-images/\" + (j === 0 ? \"black-knight.png\" : \"white-knight.png\"),\r\n                posX: (100 + 500 * i).toString(),\r\n                posY: (700 * j).toString(),\r\n                color: pColor,\r\n                type: \"knight\",\r\n                side: pSide\r\n            })\r\n            updateBoard(-1, -1, 1 + 5 * i, 7 * j, pieceId)\r\n        }\r\n        for (let j = 0; j < 2; j++) {\r\n            let pColor = (j === 0 ? \"black\" : \"white\")\r\n            let pSide = i === 0 ? \"queenside\" : \"kingside\"\r\n            let pieceId = \"bishop_\" + pColor + \"_\" + pSide\r\n            result.push({\r\n                id: pieceId,\r\n                img: \"piece-images/\" + (j === 0 ? \"black-bishop.png\" : \"white-bishop.png\"),\r\n                posX: (200 + 300 * i).toString(),\r\n                posY: (700 * j).toString(),\r\n                color: pColor,\r\n                type: \"bishop\",\r\n                side: pSide\r\n            })\r\n            updateBoard(-1, -1, 2 + 3 * i, 7 * j, pieceId)\r\n        }\r\n    }\r\n\r\n    // Make kings and queens\r\n    for (let j = 0; j < 2; j++) {\r\n        let pColor = (j === 0 ? \"black\" : \"white\")\r\n        let pieceId = \"queen_\" + pColor + \"_\" + (id++).toString()\r\n        result.push({\r\n            id: pieceId,\r\n            img: \"piece-images/\" + (j === 0 ? \"black-queen.png\" : \"white-queen.png\"),\r\n            posX: \"300\",\r\n            posY: (700 * j).toString(),\r\n            color: (j === 0 ? \"black\" : \"white\"),\r\n            type: \"queen\"\r\n        })\r\n        updateBoard(-1, -1, 3, 7 * j, pieceId)\r\n    }\r\n    for (let j = 0; j < 2; j++) {\r\n        let pColor = (j === 0 ? \"black\" : \"white\")\r\n        let pieceId = \"king_\" + pColor\r\n        result.push({\r\n            id: pieceId,\r\n            img: \"piece-images/\" + (j === 0 ? \"black-king.png\" : \"white-king.png\"),\r\n            posX: \"400\",\r\n            posY: (700 * j).toString(),\r\n            color: (j === 0 ? \"black\" : \"white\"),\r\n            type: \"king\"\r\n        })\r\n        updateBoard(-1, -1, 4, 7 * j, pieceId)\r\n    }\r\n    detailBoard()\r\n\r\n    return result\r\n}\r\n\r\nfunction pieceSelected(pieceId, x, y, pieceColor, pieceType, highlightPiece) {\r\n    if (gameState !== \"game running\") {\r\n        return\r\n    }\r\n    if (selectedPiece == null) {\r\n        if (pieceColor === currentTurn) {\r\n            selectedPiece = {\r\n                id: pieceId,\r\n                color: pieceColor,\r\n                type: pieceType,\r\n                posX: x,\r\n                posY: y\r\n            }\r\n            setHighlight = highlightPiece\r\n            highlightPiece(true)\r\n        }\r\n    } else if (selectedPiece.id === pieceId) {\r\n        selectedPiece = null\r\n        highlightPiece(false)\r\n    } else { // Piece trying to capture another piece (color unknown)\r\n        if (pieceColor !== selectedPiece.color) {\r\n            if (squareSelected(x, y, true)) {\r\n                oSetPieces(oPieces.filter((piece) => piece.id !== pieceId))\r\n                if (pieceType === \"king\") {\r\n                    endGame(opposite(pieceColor))\r\n                }\r\n            }\r\n        } else {\r\n            setHighlight(false)\r\n            selectedPiece = {\r\n                id: pieceId,\r\n                color: pieceColor,\r\n                type: pieceType,\r\n                posX: x,\r\n                posY: y\r\n            }\r\n\r\n            setHighlight = highlightPiece\r\n            highlightPiece(true)\r\n        }\r\n    }\r\n}\r\n\r\nlet setCurrentTurn\r\nconst Board = (props) => {\r\n    let squares = []\r\n    const [pieces, setPieces] = useState(originalPieces)\r\n    const [turnColor, setTurnColor] = useState(\"white\")\r\n    let flipBoard = turnColor === \"white\" ? 0 : 700\r\n    \r\n    setCurrentTurn = setTurnColor\r\n    oPieces = pieces\r\n    oSetPieces = setPieces\r\n    endMatch = props.matchEnded\r\n\r\n    kingCaptures = !props.checkEnabled\r\n    castlingEnabled = props.castlingEnabled\r\n    flippingBoardEnabled = props.flippingEnabled\r\n    pieceMovements = props.moveTypes\r\n\r\n    useEffect(() => {\r\n        if (props.gameDrawn) {\r\n            endGame(\"draw\")\r\n        }\r\n    })\r\n    \r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            let newSquare = {\r\n                color: (i + j) % 2 === 0 ? \"light-square\" : \"dark-square\",\r\n                sizeX: (100 / 8).toString() + \"%\",\r\n                sizeY: (100 / 8).toString() + \"%\",\r\n                posX: (Math.abs(flipBoard - j * 100)).toString(),\r\n                posY: (Math.abs(flipBoard - i * 100)).toString(),\r\n                id: \"square_\" + ((i + 1).toString()).padStart(2, \"0\") +\r\n                     ((j + 1).toString()).padStart(2, \"0\")\r\n            }\r\n\r\n            squares.push(newSquare)\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div style={{\r\n            position: \"absolute\",\r\n            height: \"100vh\",\r\n            width: \"80vw\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            backgroundColor: \"rgb(20, 20, 20)\",\r\n        }}>\r\n        <div style={boardStyle}>\r\n            {squares.map((square) => (\r\n                <Square color={square.color} width={square.sizeX} height={square.sizeY} \r\n                posX={square.posX} posY={square.posY} key={square.id} selectSquare={squareSelected}\r\n                boardFlip={flipBoard}/>\r\n            ))}\r\n            {pieces.map((piece) => (\r\n                <Piece key={piece.id} img={piece.img} sizeX=\"12.5%\" sizeY=\"12.5%\" color={piece.color}\r\n                type={piece.type} posX={piece.posX} posY={piece.posY} id={piece.id} boardFlip={flipBoard}\r\n                selectPiece={pieceSelected} addSetter={addSetter} gameState={gameState}/>\r\n            ))}\r\n            \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst boardStyle = {\r\n    width: \"100vmin\",\r\n    height: \"100vmin\",\r\n    backgroundColor: \"gray\",\r\n    position: \"relative\",\r\n}\r\n\r\nexport default Board","import \"./Square.css\"\r\nimport React from \"react\"\r\n\r\nconst Square = (props) => {\r\n    let posX = (Math.abs(props.boardFlip - parseInt(props.posX))).toString()\r\n    let posY = (Math.abs(props.boardFlip - parseInt(props.posY))).toString()\r\n    return (\r\n        <div className={props.color + \" square\"} onClick={() => props.selectSquare(posX, posY)} style={{\r\n            width: props.width.toString(),\r\n            height: props.height.toString(),\r\n            transform: \"translate(\" + props.posX + \"%,\" + props.posY + \"%)\",\r\n            position: \"absolute\",\r\n        }}></div>\r\n    )\r\n}\r\n\r\nexport default Square","import React, { useState } from \"react\"\r\n\r\nconst Piece = (props) => {\r\n    const [positionX, setPositionX] = useState(props.posX)\r\n    const [positionY, setPositionY] = useState(props.posY)\r\n    const [background, setBackground] = useState(\"rgba(27, 143, 166, 0)\")\r\n\r\n    // console.log(\"Hi this is\", props.id, \"located at\", positionX, positionY, \"or\", props.posX, props.posY)\r\n    function highlightPiece(isSelected) {\r\n        if (isSelected) {\r\n            setBackground(\"rgba(27, 143, 166, 1)\")\r\n        } else {\r\n            setBackground(\"rgba(27, 143, 166, 0)\")\r\n        }\r\n    }\r\n    props.addSetter(props.id, setPositionX, setPositionY)\r\n    let posY = (Math.abs(props.boardFlip - parseInt(positionY))).toString()\r\n    let posX = (Math.abs(props.boardFlip - parseInt(positionX))).toString()\r\n\r\n    return (\r\n        <img src={props.img} alt={props.id} \r\n            onClick={() => props.selectPiece(props.id, positionX, positionY, props.color, props.type, \r\n                highlightPiece)} \r\n            style={{\r\n                transform: \"translate(\" + posX + \"%,\" + posY + \"%)\",\r\n                //filter: \"brightness(\" + props.color === \"white\" ? \"100%)\" : \"20%)\",\r\n                position: \"absolute\",\r\n                width: props.sizeX,\r\n                height: props.sizeY,\r\n                backgroundColor: background\r\n        }} />\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Piece","import \"./btn.css\"\r\nimport \"./WinAnnouncement.css\"\r\nimport React from \"react\"\r\n\r\nfunction capitalizeFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1)\r\n}\r\n\r\nconst WinAnnouncement = (props) => {\r\n    let txt = \"\"\r\n    if (props.color === \"draw\") {\r\n        txt = \"Game drawn!\"\r\n    } else {\r\n        txt = capitalizeFirst(props.color) + \" wins!\"\r\n    }\r\n\r\n    let secondClass = props.showWin ? \"show\" : \"hide\"\r\n    return (\r\n        <div className={\"win-announcement \" + secondClass}>\r\n            <p>{txt}</p>\r\n            <button className=\"btn\" onClick={props.reset}>Restart</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default WinAnnouncement","import DrawBtn from \"./DrawBtn\"\r\nimport MoveSettings from \"./MoveSettings\"\r\nimport MoveSettingsBtn from \"./MoveSettingsBtn\"\r\nimport React from \"react\"\r\nimport { useState } from \"react\"\r\n\r\nconst ControlBar = (props) => {\r\n    const [showSettings, setShowSettings] = useState({\r\n        rook: false,\r\n        knight: false,\r\n        bishop: false,\r\n        queen: false,\r\n        king: false\r\n    })\r\n\r\n    const [showTutorial, setShowTutorial] = useState(false)\r\n    console.log(showTutorial)\r\n    \r\n    let showTutorialClass = showTutorial ? \"show\" : \"hide\"\r\n    let pieces = [\"rook\", \"knight\", \"bishop\", \"queen\", \"king\"]\r\n\r\n    function showMoveSettings(show, type) {\r\n        let newSettings = global.structuredClone(showSettings)\r\n        newSettings[type] = show\r\n        setShowSettings(newSettings)\r\n    }\r\n    \r\n    return (\r\n        <>\r\n        <div className=\"control-bar\">\r\n            <DrawBtn drawGame={props.drawGame}/>\r\n            <button className=\"cb-btn\" onClick={() => {\r\n                props.changeChecks(!props.checkEnabled)\r\n            }}>{props.checkEnabled ? \"Disable\" : \"Enable\"} check/checkmate detection</button>\r\n            <button  className=\"cb-btn\" onClick={() => {\r\n                props.changeCastling(!props.castlingEnabled)\r\n            }}>{props.castlingEnabled ? \"Disable\" : \"Enable\"} castling\r\n            </button>\r\n            <button className=\"cb-btn\" onClick={() => {props.changeFlipping(!props.flippingEnabled)}}>\r\n                {props.flippingEnabled ? \"Disable\" : \"Enable\"} board flipping each turn\r\n            </button>\r\n            {pieces.map((piece) => (\r\n                <MoveSettingsBtn key={piece + \"-btn\"} type={piece} showing={showSettings[piece]} setShowSettings={showMoveSettings}/>\r\n            ))}\r\n            \r\n            <button className=\"cb-btn\" onClick={() => setShowTutorial(!showTutorial)}>\r\n                Guide for customizing piece moves\r\n            </button>\r\n        </div>\r\n        \r\n        {pieces.map((piece) => (\r\n            <MoveSettings key={piece + \"-settings\"} type={piece} showSettings={showSettings[piece]} \r\n            setShowSettings={showMoveSettings} sendTriplets={props.sendTriplets}/>\r\n        ))}\r\n        <div className={\"piece-settings \" + showTutorialClass}>\r\n            Important note: Piece movement customizations will not work unless castling and\r\n            check/checkmate detection are both turned off!\r\n            <p>\r\n                Piece movement patterns are made up of one or more triplets that contain three main \r\n                values in each triplet: x; this determines the unit x value, y; this determines\r\n                the unit y value, max units; this determines how many unit xs and unit ys the piece \r\n                can go at most. For example, for the triplet in the rook x: 0, y: 1, max units: 8, \r\n                this triplet says that the rook can go in the positive y direction one at a time, \r\n                cannot go into the x direction in that same move, and can do that up to 8 times in \r\n                one move. So, it says the rook can move in the positive y direction. If it was instead\r\n                x: 0, y: 2, max units: 4, the rook could only move upwards in multiples of 2, and\r\n                could jump over every other piece. Essentially, each triplet is an option that the \r\n                piece has when moving.\r\n            </p>\r\n            <button onClick={() => setShowTutorial(false)}>Close</button>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ControlBar","import \"./controlbar.css\"\r\nimport React from \"react\"\r\n\r\nconst DrawBtn = (props) => {\r\n    return (\r\n        <div className=\"draw\">\r\n            Click here if both players agree to draw!\r\n            <br/>\r\n            <button className=\"cb-btn\" onClick={props.drawGame}> Draw </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DrawBtn","import React, { useState } from \"react\"\r\nimport \"./controlbar.css\"\r\n\r\nlet key = 0\r\nlet pieceMovements = {\r\n    rook: [[1, 0, 8], [-1, 0, 8], [0, 1, 8], [0, -1, 8]],\r\n    bishop: [[1, 1, 8], [-1, -1, 8], [1, -1, 8], [-1, 1, 8]],\r\n    knight: [[1, 2, 1], [-1, 2, 1], [1, -2, 1], [-1, -2, 1], \r\n    [2, 1, 1], [2, -1, 1], [-2, 1, 1], [-2, -1, 1]],\r\n    king: [[1, 0, 1], [-1, 0, 1], [0, 1, 1], [0, -1, 1], \r\n    [1, 1, 1], [-1, -1, 1], [1, -1, 1], [-1, 1, 1]],\r\n    queen: [[1, 0, 8], [-1, 0, 8], [0, 1, 8], [0, -1, 8], \r\n    [1, 1, 8], [-1, -1, 8], [1, -1, 8], [-1, 1, 8]]\r\n}\r\n\r\nfunction createInitialState(type) {\r\n    let initialState = []\r\n    let movements = pieceMovements[type]\r\n    for (let i = 0; i < movements.length; i++) {\r\n        initialState.push({\r\n            id: key++,\r\n            x: movements[i][0],\r\n            y: movements[i][1],\r\n            maxu: movements[i][2]\r\n        })\r\n    }\r\n\r\n    return initialState\r\n}\r\n\r\nconst MoveSettings = (props) => {\r\n    const [triplets, setTriplets] = useState(createInitialState(props.type))\r\n    let secondClass = props.showSettings ? \"show\" : \"hide\"\r\n    return (\r\n        <>\r\n            <div className={\"piece-settings \" + secondClass}>\r\n                {triplets.map((triplet) => (\r\n                    <div className=\"setting-triplet\" key={triplet.id}>\r\n                        <div>Unit x:<input type=\"number\" className=\"setting-input\" \r\n                            min=\"-8\" max=\"8\" value={triplet.x} \r\n                            onChange={(e) => setTriplets(triplets.map((t) => {\r\n                                if (t.id === triplet.id) {\r\n                                    let newX = e.target.value === undefined ? undefined : parseInt(e.target.value)\r\n                                    return {id: t.id, x: newX, y: t.y, maxu: t.maxu}\r\n                                } else{\r\n                                    return t\r\n                                }\r\n                            }))}></input></div>\r\n                        <div>Unit y:<input type=\"number\" className=\"setting-input\"\r\n                            min=\"-8\" max=\"8\" value={triplet.y} \r\n                            onChange={(e) => setTriplets(triplets.map((t) => {\r\n                                if (t.id === triplet.id) {\r\n                                    let newY = e.target.value === undefined ? undefined : parseInt(e.target.value)\r\n                                    return {id: t.id, x: t.x, y: newY, maxu: t.maxu}\r\n                                } else{\r\n                                    return t\r\n                                }\r\n                            }))}></input></div>\r\n                        <div>Max units:<input type=\"number\" className=\"setting-input\"\r\n                            min=\"0\" max=\"8\" value={triplet.maxu} \r\n                            onChange={(e) => setTriplets(triplets.map((t) => {\r\n                                if (t.id === triplet.id) {\r\n                                    let newMaxu = e.target.value === undefined ? undefined : parseInt(e.target.value)\r\n                                    return {id: t.id, x: t.x, y: t.y, maxu: newMaxu}\r\n                                } else{\r\n                                    return t\r\n                                }\r\n                            }))}></input></div>\r\n                        <div onClick={() => setTriplets(triplets.filter((t) => triplet.id !== t.id))}\r\n                            className=\"delete-btn\">&#10006;</div>\r\n                    </div>\r\n                ))}\r\n                <div className=\"add-btn\" onClick={() => setTriplets([...triplets, {id: key++, x: 0, \r\n                y: 0, maxu: 0}])}>&#10010;</div>\r\n                <button className=\"cb-btn\" onClick={() => {\r\n                    props.setShowSettings(false, props.type)\r\n                    props.sendTriplets(triplets, props.type)\r\n                }}>Save</button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MoveSettings","import React from \"react\"\r\nimport \"./controlbar.css\"\r\n\r\n\r\nconst MoveSettingsBtn = (props) => {\r\n    return (\r\n        <button className=\"cb-btn\" onClick={() => {\r\n            props.setShowSettings(!props.showing, props.type)\r\n        }}> \r\n            Change move settings for the {props.type}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default MoveSettingsBtn","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}